{"version":3,"file":"common.js","mappings":"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","sources":["./node_modules/@aws-amplify/ui-components/dist/esm/auth-helpers-475f7fa4.js"],"sourcesContent":["import { Logger, isEmpty } from '@aws-amplify/core';\nimport { A as AuthState, C as ChallengeName, U as UsernameAlias } from './auth-types-78df304e.js';\nimport { Auth, CognitoUser } from '@aws-amplify/auth';\nimport { T as Translations } from './Translations-c833f663.js';\nimport { N as NO_AUTH_MODULE_FOUND } from './constants-c8ecaa24.js';\nimport { a as dispatchToastHubEvent } from './helpers-9703fe65.js';\n\nconst logger = new Logger('auth-helpers');\nasync function checkContact(user, handleAuthStateChange) {\n    if (!Auth || typeof Auth.verifiedContact !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n    }\n    // If `user` is a federated user, we shouldn't call `verifiedContact`\n    // since `user` isn't `CognitoUser`\n    if (!isCognitoUser(user)) {\n        handleAuthStateChange(AuthState.SignedIn, user);\n        return;\n    }\n    try {\n        const data = await Auth.verifiedContact(user);\n        if (!isEmpty(data.verified) || isEmpty(data.unverified)) {\n            handleAuthStateChange(AuthState.SignedIn, user);\n        }\n        else {\n            const newUser = Object.assign(user, data);\n            handleAuthStateChange(AuthState.VerifyContact, newUser);\n        }\n    }\n    catch (error) {\n        dispatchToastHubEvent(error);\n    }\n}\nconst handleSignIn = async (username, password, handleAuthStateChange, usernameAlias) => {\n    if (!Auth || typeof Auth.signIn !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n    }\n    try {\n        const user = await Auth.signIn(username, password);\n        logger.debug(user);\n        if (user.challengeName === ChallengeName.SMSMFA ||\n            user.challengeName === ChallengeName.SoftwareTokenMFA) {\n            logger.debug('confirm user with ' + user.challengeName);\n            handleAuthStateChange(AuthState.ConfirmSignIn, user);\n        }\n        else if (user.challengeName === ChallengeName.NewPasswordRequired) {\n            logger.debug('require new password', user.challengeParam);\n            handleAuthStateChange(AuthState.ResetPassword, user);\n        }\n        else if (user.challengeName === ChallengeName.MFASetup) {\n            logger.debug('TOTP setup', user.challengeParam);\n            handleAuthStateChange(AuthState.TOTPSetup, user);\n        }\n        else if (user.challengeName === ChallengeName.CustomChallenge &&\n            user.challengeParam &&\n            user.challengeParam.trigger === 'true') {\n            logger.debug('custom challenge', user.challengeParam);\n            handleAuthStateChange(AuthState.CustomConfirmSignIn, user);\n        }\n        else {\n            await checkContact(user, handleAuthStateChange);\n        }\n    }\n    catch (error) {\n        if (error.code === 'UserNotConfirmedException') {\n            logger.debug('the user is not confirmed');\n            handleAuthStateChange(AuthState.ConfirmSignUp, { username });\n        }\n        else if (error.code === 'PasswordResetRequiredException') {\n            logger.debug('the user requires a new password');\n            handleAuthStateChange(AuthState.ForgotPassword, { username });\n        }\n        else if (error.code === 'InvalidParameterException' && password === '') {\n            logger.debug('Password cannot be empty');\n            error.message = Translations.EMPTY_PASSWORD;\n        }\n        else if (error.message === Translations.EMPTY_USERNAME) {\n            if (usernameAlias === UsernameAlias.email) {\n                error.message = Translations.EMPTY_EMAIL;\n            }\n            if (usernameAlias === UsernameAlias.phone_number) {\n                error.message = Translations.EMPTY_PHONE;\n            }\n        }\n        dispatchToastHubEvent(error);\n    }\n};\nconst isCognitoUser = (user) => {\n    return user instanceof CognitoUser;\n};\n\nexport { checkContact as c, handleSignIn as h };\n"],"names":["Logger","isEmpty","A","AuthState","C","ChallengeName","U","UsernameAlias","Auth","CognitoUser","T","Translations","N","NO_AUTH_MODULE_FOUND","a","dispatchToastHubEvent","logger","checkContact","user","handleAuthStateChange","verifiedContact","Error","isCognitoUser","SignedIn","data","verified","unverified","newUser","Object","assign","VerifyContact","handleSignIn","username","password","usernameAlias","signIn","debug","challengeName","SMSMFA","SoftwareTokenMFA","ConfirmSignIn","NewPasswordRequired","challengeParam","ResetPassword","MFASetup","TOTPSetup","CustomChallenge","trigger","CustomConfirmSignIn","code","ConfirmSignUp","ForgotPassword","message","EMPTY_PASSWORD","EMPTY_USERNAME","email","EMPTY_EMAIL","phone_number","EMPTY_PHONE","c","h"],"sourceRoot":"webpack:///"}