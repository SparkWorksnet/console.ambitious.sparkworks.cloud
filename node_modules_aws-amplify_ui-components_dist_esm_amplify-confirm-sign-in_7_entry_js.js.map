{"version":3,"file":"node_modules_aws-amplify_ui-components_dist_esm_amplify-confirm-sign-in_7_entry_js.js","mappings":"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","sources":["./node_modules/@aws-amplify/ui-components/dist/esm/amplify-confirm-sign-in_7.entry.js"],"sourcesContent":["import { r as registerInstance, h, H as Host } from './index-83f2275b.js';\nimport { I18n, Logger, ConsoleLogger, isEmpty } from '@aws-amplify/core';\nimport { M as MfaOption, C as ChallengeName, A as AuthState, a as AuthFormField, U as UsernameAlias } from './auth-types-78df304e.js';\nimport { Auth } from '@aws-amplify/auth';\nimport { T as Translations } from './Translations-c833f663.js';\nimport { N as NO_AUTH_MODULE_FOUND, g as COUNTRY_DIAL_CODE_DEFAULT, b as PHONE_SUFFIX } from './constants-c8ecaa24.js';\nimport { d as dispatchAuthStateChangeEvent, a as dispatchToastHubEvent, c as checkUsernameAlias, i as isHintValid, h as handlePhoneNumberChange, b as composePhoneNumberInput, g as getRequiredAttributesMap } from './helpers-9703fe65.js';\nimport { c as checkContact, h as handleSignIn } from './auth-helpers-475f7fa4.js';\n\nconst AmplifyConfirmSignIn = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Fires when confirm sign in form is submitted */\n        this.handleSubmit = event => this.confirm(event);\n        /** Used for header text in confirm sign in component */\n        this.headerText = Translations.CONFIRM_SMS_CODE;\n        /** Used for the submit button text in confirm sign in component */\n        this.submitButtonText = Translations.CONFIRM;\n        /** Auth state change handler for this component */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        /** Default form field */\n        this.defaultFormFields = [\n            {\n                type: 'code',\n                required: true,\n                handleInputChange: event => this.handleCodeChange(event),\n            },\n        ];\n        /**\n         * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.\n         * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing\n         * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.\n         * ```\n         * [\n         *  {\n         *    type: string,\n         *    label: string,\n         *    placeholder: string,\n         *    hint: string | Functional Component | null,\n         *    required: boolean\n         *  }\n         * ]\n         * ```\n         */\n        this.formFields = this.defaultFormFields;\n        /** The MFA option to confirm with */\n        this.mfaOption = MfaOption.SMS;\n        /* Whether or not the confirm-sign-in component is loading */\n        this.loading = false;\n    }\n    componentWillLoad() {\n        this.setup();\n    }\n    userHandler() {\n        this.setup();\n    }\n    setup() {\n        if (this.user &&\n            this.user['challengeName'] === ChallengeName.SoftwareTokenMFA) {\n            this.mfaOption = MfaOption.TOTP;\n            // If header text is using default use TOTP string\n            if (this.headerText === Translations.CONFIRM_SMS_CODE) {\n                this.headerText = Translations.CONFIRM_TOTP_CODE;\n            }\n        }\n        this.constructedFormFieldOptions = this.constructFormFieldOptions(this.formFields);\n    }\n    handleCodeChange(event) {\n        this.code = event.target.value;\n    }\n    async confirm(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        const mfaType = this.user['challengeName'] === ChallengeName.SoftwareTokenMFA\n            ? ChallengeName.SoftwareTokenMFA\n            : null;\n        if (!Auth || typeof Auth.confirmSignIn !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            await Auth.confirmSignIn(this.user, this.code, mfaType);\n            await checkContact(this.user, this.handleAuthStateChange);\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    constructFormFieldOptions(formFields) {\n        const content = [];\n        if (formFields === undefined)\n            return undefined;\n        if (formFields.length <= 0)\n            return this.defaultFormFields;\n        formFields.forEach((formField) => {\n            if (typeof formField === 'string' || formField.type !== 'code') {\n                // This is either a `string`, and/or a custom field that isn't `code`. Pass this directly.\n                content.push(formField);\n            }\n            else {\n                // This is a code input field. Attach input handler.\n                content.push(Object.assign({ handleInputChange: event => this.handleCodeChange(event) }, formField));\n            }\n        });\n        return content;\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-form-section\", { headerText: I18n.get(this.headerText), handleSubmit: this.handleSubmit, submitButtonText: I18n.get(this.submitButtonText), loading: this.loading, secondaryFooterContent: h(\"span\", null, h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignIn) }, I18n.get(Translations.BACK_TO_SIGN_IN))) }, h(\"amplify-auth-fields\", { formFields: this.constructedFormFieldOptions }))));\n    }\n    static get watchers() { return {\n        \"user\": [\"userHandler\"]\n    }; }\n};\n\nconst AmplifyConfirmSignUp = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Fires when sign up form is submitted */\n        this.handleSubmit = event => this.confirmSignUp(event);\n        /** Used for header text in confirm sign up component */\n        this.headerText = Translations.CONFIRM_SIGN_UP_HEADER_TEXT;\n        /** Used for the submit button text in confirm sign up component */\n        this.submitButtonText = Translations.CONFIRM_SIGN_UP_SUBMIT_BUTTON_TEXT;\n        /**\n         * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.\n         * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing\n         * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.\n         * ```\n         * [\n         *  {\n         *    type: string,\n         *    label: string,\n         *    placeholder: string,\n         *    hint: string | Functional Component | null,\n         *    required: boolean\n         *  }\n         * ]\n         * ```\n         */\n        this.formFields = [];\n        /** Auth state change handler for this components\n         * e.g. SignIn -> 'Create Account' link -> SignUp\n         */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */\n        this.usernameAlias = 'username';\n        this.loading = false;\n        this.newFormFields = [];\n        this.phoneNumber = {\n            countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n            phoneNumberValue: null,\n        };\n    }\n    componentWillLoad() {\n        this.setup();\n    }\n    formFieldsHandler() {\n        this.buildFormFields();\n    }\n    userHandler() {\n        this.setup();\n    }\n    setup() {\n        // TODO: Use optional chaining instead\n        this.userInput = this.user && this.user.username;\n        this._signUpAttrs = this.user && this.user.signUpAttrs;\n        checkUsernameAlias(this.usernameAlias);\n        this.buildFormFields();\n    }\n    buildDefaultFormFields() {\n        this.newFormFields = [\n            {\n                type: `${this.usernameAlias}`,\n                required: true,\n                handleInputChange: this.handleFormFieldInputChange(`${this.usernameAlias}`),\n                value: this.userInput,\n                disabled: this.userInput ? true : false,\n                inputProps: { autocomplete: 'username' },\n            },\n            {\n                type: 'code',\n                label: I18n.get(Translations.CONFIRM_SIGN_UP_CODE_LABEL),\n                placeholder: I18n.get(Translations.CONFIRM_SIGN_UP_CODE_PLACEHOLDER),\n                required: true,\n                hint: (h(\"div\", null, I18n.get(Translations.CONFIRM_SIGN_UP_LOST_CODE), ' ', h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.resendConfirmCode() }, I18n.get(Translations.CONFIRM_SIGN_UP_RESEND_CODE)))),\n                handleInputChange: this.handleFormFieldInputChange('code'),\n            },\n        ];\n    }\n    buildFormFields() {\n        if (this.formFields.length === 0) {\n            this.buildDefaultFormFields();\n        }\n        else {\n            const newFields = [];\n            this.formFields.forEach(field => {\n                const newField = Object.assign({}, field);\n                if (newField.type === 'code') {\n                    newField['hint'] = isHintValid(newField) ? (h(\"div\", null, I18n.get(Translations.CONFIRM_SIGN_UP_LOST_CODE), ' ', h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.resendConfirmCode() }, I18n.get(Translations.CONFIRM_SIGN_UP_RESEND_CODE)))) : (newField['hint']);\n                }\n                newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);\n                newFields.push(newField);\n            });\n            this.newFormFields = newFields;\n        }\n    }\n    handleFormFieldInputChange(fieldType) {\n        switch (fieldType) {\n            case 'username':\n            case 'email':\n                return event => (this.userInput = event.target.value);\n            case 'phone_number':\n                return event => handlePhoneNumberChange(event, this.phoneNumber);\n            case 'code':\n                return event => (this.code = event.target.value);\n            default:\n                return;\n        }\n    }\n    setFieldValue(field) {\n        switch (field.type) {\n            case 'username':\n            case 'email':\n                if (field.value === undefined) {\n                    this.userInput = '';\n                }\n                else {\n                    this.userInput = field.value;\n                }\n                break;\n            case 'phone_number':\n                if (field.dialCode) {\n                    this.phoneNumber.countryDialCodeValue = field.dialCode;\n                }\n                this.phoneNumber.phoneNumberValue = field.value;\n                break;\n        }\n    }\n    handleFormFieldInputWithCallback(event, field) {\n        const fnToCall = field['handleInputChange']\n            ? field['handleInputChange']\n            : (event, cb) => {\n                cb(event);\n            };\n        const callback = this.handleFormFieldInputChange(field.type);\n        fnToCall(event, callback.bind(this));\n    }\n    /**\n     * Returns the username of the user to confirm. If a valid `user.username` has been passed as a prop, we return that.\n     * Otherwise, we return the `userInput` on the form.\n     */\n    getUsername() {\n        if (this.user && this.user.username)\n            return this.user.username;\n        switch (this.usernameAlias) {\n            case 'username':\n            case 'email':\n                return this.userInput;\n            case 'phone_number':\n                return composePhoneNumberInput(this.phoneNumber);\n        }\n    }\n    async resendConfirmCode() {\n        if (event) {\n            event.preventDefault();\n        }\n        if (!Auth || typeof Auth.resendSignUp !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        try {\n            const username = this.getUsername();\n            if (!username)\n                throw new Error(Translations.EMPTY_USERNAME);\n            await Auth.resendSignUp(username.trim());\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n    }\n    // TODO: Add validation\n    // TODO: Prefix\n    async confirmSignUp(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        if (!Auth || typeof Auth.confirmSignUp !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            let username = this.getUsername();\n            if (!username)\n                throw new Error(Translations.EMPTY_USERNAME);\n            username = username.trim();\n            const confirmSignUpResult = await Auth.confirmSignUp(username, this.code);\n            if (!confirmSignUpResult) {\n                throw new Error(I18n.get(Translations.CONFIRM_SIGN_UP_FAILED));\n            }\n            if (this._signUpAttrs &&\n                this._signUpAttrs.password &&\n                this._signUpAttrs.password !== '') {\n                // Auto sign in user if password is available from previous workflow\n                await handleSignIn(username, this._signUpAttrs.password, this.handleAuthStateChange);\n            }\n            else {\n                this.handleAuthStateChange(AuthState.SignIn);\n            }\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-form-section\", { headerText: I18n.get(this.headerText), submitButtonText: I18n.get(this.submitButtonText), handleSubmit: this.handleSubmit, loading: this.loading, secondaryFooterContent: h(\"div\", null, h(\"span\", null, h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignIn) }, I18n.get(Translations.BACK_TO_SIGN_IN)))) }, h(\"amplify-auth-fields\", { formFields: this.newFormFields }))));\n    }\n    static get watchers() { return {\n        \"formFields\": [\"formFieldsHandler\"],\n        \"user\": [\"userHandler\"]\n    }; }\n};\n\nconst logger = new Logger('ForgotPassword');\nconst AmplifyForgotPassword = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** The header text of the forgot password section */\n        this.headerText = Translations.RESET_YOUR_PASSWORD;\n        /** The text displayed inside of the send code button for the form */\n        this.sendButtonText = Translations.SEND_CODE;\n        /** The text displayed inside of the submit button for the form */\n        this.submitButtonText = Translations.SUBMIT;\n        /** The form fields displayed inside of the forgot password form */\n        this.formFields = [];\n        /** The function called when making a request to reset password */\n        this.handleSend = event => this.send(event);\n        /** The function called when submitting a new password */\n        this.handleSubmit = event => this.submit(event);\n        /** Auth state change handler for this component */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */\n        this.usernameAlias = 'username';\n        this.delivery = null;\n        this.loading = false;\n        this.phoneNumber = {\n            countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n            phoneNumberValue: null,\n        };\n        this.newFormFields = [];\n        this.forgotPasswordAttrs = {\n            userInput: '',\n            password: '',\n            code: '',\n        };\n    }\n    componentWillLoad() {\n        checkUsernameAlias(this.usernameAlias);\n        this.buildFormFields();\n    }\n    formFieldsHandler() {\n        this.buildFormFields();\n    }\n    buildFormFields() {\n        if (this.formFields.length === 0) {\n            this.buildDefaultFormFields();\n        }\n        else {\n            const newFields = [];\n            this.formFields.forEach(field => {\n                const newField = Object.assign({}, field);\n                newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);\n                newFields.push(newField);\n            });\n            this.newFormFields = newFields;\n        }\n    }\n    buildDefaultFormFields() {\n        switch (this.usernameAlias) {\n            case 'email':\n                this.newFormFields = [\n                    {\n                        type: 'email',\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('email'),\n                        inputProps: {\n                            'data-test': 'forgot-password-email-input',\n                        },\n                    },\n                ];\n                break;\n            case 'phone_number':\n                this.newFormFields = [\n                    {\n                        type: 'phone_number',\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('phone_number'),\n                        inputProps: {\n                            'data-test': 'forgot-password-phone-number-input',\n                        },\n                    },\n                ];\n                break;\n            case 'username':\n            default:\n                this.newFormFields = [\n                    {\n                        type: 'username',\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('username'),\n                        inputProps: {\n                            'data-test': 'forgot-password-username-input',\n                        },\n                    },\n                ];\n                break;\n        }\n    }\n    handleFormFieldInputChange(fieldType) {\n        switch (fieldType) {\n            case 'username':\n            case 'email':\n                return event => (this.forgotPasswordAttrs.userInput = event.target.value);\n            case 'phone_number':\n                return event => handlePhoneNumberChange(event, this.phoneNumber);\n            case 'password':\n            case 'code':\n                return event => (this.forgotPasswordAttrs[fieldType] = event.target.value);\n            default:\n                return;\n        }\n    }\n    setFieldValue(field, formAttributes) {\n        switch (field.type) {\n            case 'username':\n            case 'email':\n                if (field.value === undefined) {\n                    formAttributes.userInput = '';\n                }\n                else {\n                    formAttributes.userInput = field.value;\n                }\n                break;\n            case 'phone_number':\n                if (field.dialCode) {\n                    this.phoneNumber.countryDialCodeValue = field.dialCode;\n                }\n                this.phoneNumber.phoneNumberValue = field.value;\n                break;\n            case 'password':\n            case 'code':\n                if (field.value === undefined) {\n                    formAttributes[field.type] = '';\n                }\n                else {\n                    formAttributes[field.type] = field.value;\n                }\n                break;\n        }\n    }\n    handleFormFieldInputWithCallback(event, field) {\n        const fnToCall = field['handleInputChange']\n            ? field['handleInputChange']\n            : (event, cb) => {\n                cb(event);\n            };\n        const callback = this.handleFormFieldInputChange(field.type);\n        fnToCall(event, callback.bind(this));\n    }\n    async send(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        if (!Auth || typeof Auth.forgotPassword !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        switch (this.usernameAlias) {\n            case 'phone_number':\n                try {\n                    this.forgotPasswordAttrs.userInput = composePhoneNumberInput(this.phoneNumber);\n                }\n                catch (error) {\n                    dispatchToastHubEvent(error);\n                }\n                break;\n        }\n        try {\n            const data = await Auth.forgotPassword(this.forgotPasswordAttrs.userInput.trim());\n            logger.debug(data);\n            this.newFormFields = [\n                {\n                    type: 'code',\n                    required: true,\n                    handleInputChange: this.handleFormFieldInputChange('code'),\n                    inputProps: {\n                        'data-test': 'forgot-password-code-input',\n                    },\n                },\n                {\n                    type: 'password',\n                    required: true,\n                    handleInputChange: this.handleFormFieldInputChange('password'),\n                    label: I18n.get(Translations.NEW_PASSWORD_LABEL),\n                    placeholder: I18n.get(Translations.NEW_PASSWORD_PLACEHOLDER),\n                },\n            ];\n            this.delivery = data.CodeDeliveryDetails;\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    async submit(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        if (!Auth || typeof Auth.forgotPasswordSubmit !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            const { userInput, code, password } = this.forgotPasswordAttrs;\n            const data = await Auth.forgotPasswordSubmit(userInput.trim(), code, password);\n            logger.debug(data);\n            this.handleAuthStateChange(AuthState.SignIn);\n            this.delivery = null;\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    render() {\n        const submitFn = this.delivery\n            ? event => this.handleSubmit(event)\n            : event => this.handleSend(event);\n        const submitButtonText = this.delivery\n            ? this.submitButtonText\n            : this.sendButtonText;\n        return (h(Host, null, h(\"amplify-form-section\", { headerText: I18n.get(this.headerText), handleSubmit: submitFn, loading: this.loading, secondaryFooterContent: h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignIn), \"data-test\": \"forgot-password-back-to-sign-in-link\" }, I18n.get(Translations.BACK_TO_SIGN_IN)), testDataPrefix: 'forgot-password', submitButtonText: I18n.get(submitButtonText) }, h(\"amplify-auth-fields\", { formFields: this.newFormFields }))));\n    }\n    static get watchers() { return {\n        \"formFields\": [\"formFieldsHandler\"]\n    }; }\n};\n\nconst logger$1 = new ConsoleLogger('amplify-require-new-password');\nconst AmplifyRequireNewPassword = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** The header text of the forgot password section */\n        this.headerText = Translations.CHANGE_PASSWORD;\n        /** The text displayed inside of the submit button for the form */\n        this.submitButtonText = Translations.CHANGE_PASSWORD_ACTION;\n        /** The function called when submitting a new password */\n        this.handleSubmit = event => this.completeNewPassword(event);\n        /** Auth state change handler for this component */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        /** The form fields displayed inside of the forgot password form */\n        this.formFields = [\n            {\n                type: AuthFormField.Password,\n                required: true,\n                handleInputChange: event => this.handlePasswordChange(event),\n                label: I18n.get(Translations.NEW_PASSWORD_LABEL),\n                placeholder: I18n.get(Translations.NEW_PASSWORD_PLACEHOLDER),\n                inputProps: {\n                    'data-test': 'require-new-password-password-input',\n                },\n            },\n        ];\n        this.loading = false;\n        this.requiredAttributes = {};\n        this.newFormFields = this.formFields;\n        this.phoneNumber = {\n            countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n            phoneNumberValue: ' ',\n        };\n    }\n    userHandler() {\n        this.setCurrentUser();\n    }\n    handleRequiredAttributeInputChange(attribute, event) {\n        if (attribute === 'phone_number') {\n            this.formatPhoneNumber(event);\n        }\n        else {\n            this.requiredAttributes[attribute] = event.target.value;\n        }\n    }\n    async setCurrentUser() {\n        if (!this.user) {\n            // Check for authenticated user\n            try {\n                const user = await Auth.currentAuthenticatedUser();\n                if (user)\n                    this.currentUser = user;\n            }\n            catch (error) {\n                dispatchToastHubEvent(error);\n            }\n        }\n        else {\n            this.currentUser = this.user;\n        }\n        if (this.currentUser &&\n            this.currentUser.challengeParam &&\n            this.currentUser.challengeParam.requiredAttributes) {\n            const userRequiredAttributes = this.currentUser.challengeParam\n                .requiredAttributes;\n            const requiredAttributesMap = getRequiredAttributesMap();\n            userRequiredAttributes.forEach((attribute) => {\n                const formField = {\n                    type: attribute,\n                    required: true,\n                    label: requiredAttributesMap[attribute].label,\n                    placeholder: requiredAttributesMap[attribute].placeholder,\n                    handleInputChange: event => this.handleRequiredAttributeInputChange(attribute, event),\n                    inputProps: {\n                        'data-test': `require-new-password-${attribute}-input`,\n                    },\n                };\n                this.newFormFields = [...this.newFormFields, formField];\n            });\n        }\n    }\n    componentWillLoad() {\n        return this.setCurrentUser();\n    }\n    handlePasswordChange(event) {\n        this.password = event.target.value;\n    }\n    formatPhoneNumber(event) {\n        handlePhoneNumberChange(event, this.phoneNumber);\n        /**\n         * composePhoneNumberInput will throw an error if the phoneNumberValue it receives\n         * is empty. Adding a check here to try and make sure that doesn't happen...but will\n         * wrap it in a try/catch block just in case as well\n         */\n        try {\n            if (event.target.name === PHONE_SUFFIX &&\n                this.phoneNumber.phoneNumberValue) {\n                const composedInput = composePhoneNumberInput(this.phoneNumber);\n                this.requiredAttributes['phone_number'] = composedInput;\n            }\n        }\n        catch (err) {\n            logger$1.error(`error in phone number field - ${err}`);\n        }\n    }\n    async completeNewPassword(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        if (!Auth || typeof Auth.completeNewPassword !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            const user = await Auth.completeNewPassword(this.currentUser, this.password, this.requiredAttributes);\n            logger$1.debug('complete new password', user);\n            switch (user.challengeName) {\n                case ChallengeName.SMSMFA:\n                    this.handleAuthStateChange(AuthState.ConfirmSignIn, user);\n                    break;\n                case ChallengeName.MFASetup:\n                    logger$1.debug('TOTP setup', user.challengeParam);\n                    this.handleAuthStateChange(AuthState.TOTPSetup, user);\n                    break;\n                default:\n                    await checkContact(user, this.handleAuthStateChange);\n            }\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-form-section\", { headerText: I18n.get(this.headerText), handleSubmit: this.handleSubmit, loading: this.loading, secondaryFooterContent: h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignIn) }, I18n.get(Translations.BACK_TO_SIGN_IN)), submitButtonText: I18n.get(this.submitButtonText) }, h(\"amplify-auth-fields\", { formFields: this.newFormFields }))));\n    }\n    static get watchers() { return {\n        \"user\": [\"userHandler\"]\n    }; }\n};\n\nconst amplifySignInCss = \":host{--footer-size:var(--amplify-text-sm);--footer-color:var(--amplify-grey);--footer-font-family:var(--amplify-font-family);--font-weight:var(--amplify-font-weight)}.sign-in-form-footer{font-family:var(--footer-font-family);font-size:var(--footer-size);color:var(--footer-color);font-weight:--font-weight;display:-ms-flexbox;display:flex;-ms-flex-direction:column-reverse;flex-direction:column-reverse;-ms-flex-align:center;align-items:center;-ms-flex-pack:distribute;justify-content:space-around}.sign-in-form-footer amplify-button{margin-bottom:0.625rem}@media (min-width: 672px){.sign-in-form-footer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:baseline;align-items:baseline}.sign-in-form-footer amplify-button{margin-bottom:0}}.sign-in-form-footer *+*{margin-bottom:15px}.full-width-footer-content{width:100%}\";\n\nconst AmplifySignIn = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Fires when sign in form is submitted */\n        this.handleSubmit = event => this.signIn(event);\n        /** Used for header text in sign in component */\n        this.headerText = Translations.SIGN_IN_HEADER_TEXT;\n        /** Used for the submit button text in sign in component */\n        this.submitButtonText = Translations.SIGN_IN_ACTION;\n        /** Auth state change handler for this component */\n        // prettier-ignore\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */\n        this.usernameAlias = 'username';\n        /**\n         * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.\n         * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing\n         * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.\n         * ```\n         * [\n         *  {\n         *    type: string,\n         *    label: string,\n         *    placeholder: string,\n         *    hint: string | Functional Component | null,\n         *    required: boolean\n         *  }\n         * ]\n         * ```\n         */\n        this.formFields = [];\n        /** Hides the sign up link */\n        this.hideSignUp = false;\n        this.newFormFields = [];\n        /* Whether or not the sign-in component is loading */\n        this.loading = false;\n        this.phoneNumber = {\n            countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n            phoneNumberValue: null,\n        };\n        this.signInAttributes = {\n            userInput: '',\n            password: '',\n        };\n    }\n    componentWillLoad() {\n        checkUsernameAlias(this.usernameAlias);\n        this.buildFormFields();\n    }\n    formFieldsHandler() {\n        this.buildFormFields();\n    }\n    handleFormFieldInputChange(fieldType) {\n        switch (fieldType) {\n            case 'username':\n            case 'email':\n                return event => (this.signInAttributes.userInput = event.target.value);\n            case 'phone_number':\n                return event => handlePhoneNumberChange(event, this.phoneNumber);\n            case 'password':\n                return event => (this.signInAttributes.password = event.target.value);\n            default:\n                return () => { };\n        }\n    }\n    handleFormFieldInputWithCallback(event, field) {\n        const fnToCall = field['handleInputChange']\n            ? field['handleInputChange']\n            : (event, cb) => {\n                cb(event);\n            };\n        const callback = this.handleFormFieldInputChange(field.type);\n        fnToCall(event, callback.bind(this));\n    }\n    async signIn(event) {\n        // avoid submitting the form\n        if (event) {\n            event.preventDefault();\n        }\n        this.loading = true;\n        switch (this.usernameAlias) {\n            case 'phone_number':\n                try {\n                    this.signInAttributes.userInput = composePhoneNumberInput(this.phoneNumber);\n                }\n                catch (error) {\n                    dispatchToastHubEvent(error);\n                }\n        }\n        const username = this.signInAttributes.userInput.trim();\n        await handleSignIn(username, this.signInAttributes.password, this.handleAuthStateChange, this.usernameAlias);\n        this.loading = false;\n    }\n    buildDefaultFormFields() {\n        const formFieldInputs = [];\n        switch (this.usernameAlias) {\n            case 'email':\n                formFieldInputs.push({\n                    type: 'email',\n                    required: true,\n                    handleInputChange: this.handleFormFieldInputChange('email'),\n                    inputProps: {\n                        'data-test': 'sign-in-email-input',\n                        autocomplete: 'username',\n                    },\n                });\n                break;\n            case 'phone_number':\n                formFieldInputs.push({\n                    type: 'phone_number',\n                    required: true,\n                    handleInputChange: this.handleFormFieldInputChange('phone_number'),\n                    inputProps: {\n                        'data-test': 'sign-in-phone-number-input',\n                        autocomplete: 'username',\n                    },\n                });\n                break;\n            case 'username':\n            default:\n                formFieldInputs.push({\n                    type: 'username',\n                    required: true,\n                    handleInputChange: this.handleFormFieldInputChange('username'),\n                    inputProps: {\n                        'data-test': 'sign-in-username-input',\n                        autocomplete: 'username',\n                    },\n                });\n                break;\n        }\n        formFieldInputs.push({\n            type: 'password',\n            hint: (h(\"div\", null, I18n.get(Translations.FORGOT_PASSWORD_TEXT), ' ', h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.ForgotPassword), \"data-test\": \"sign-in-forgot-password-link\" }, I18n.get(Translations.RESET_PASSWORD_TEXT)))),\n            required: true,\n            handleInputChange: this.handleFormFieldInputChange('password'),\n            inputProps: {\n                'data-test': 'sign-in-password-input',\n            },\n        });\n        this.newFormFields = [...formFieldInputs];\n    }\n    buildFormFields() {\n        if (this.formFields.length === 0) {\n            this.buildDefaultFormFields();\n        }\n        else {\n            const newFields = [];\n            this.formFields.forEach(field => {\n                const newField = Object.assign({}, field);\n                // TODO: handle hint better\n                if (newField.type === 'password') {\n                    newField['hint'] = isHintValid(newField) ? (h(\"div\", null, I18n.get(Translations.FORGOT_PASSWORD_TEXT), ' ', h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.ForgotPassword), \"data-test\": \"sign-in-forgot-password-link\" }, I18n.get(Translations.RESET_PASSWORD_TEXT)))) : (newField['hint']);\n                }\n                newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);\n                this.setFieldValue(newField, this.signInAttributes);\n                newFields.push(newField);\n            });\n            this.newFormFields = newFields;\n        }\n    }\n    setFieldValue(field, formAttributes) {\n        switch (field.type) {\n            case 'username':\n            case 'email':\n                if (field.value === undefined) {\n                    formAttributes.userInput = '';\n                }\n                else {\n                    formAttributes.userInput = field.value;\n                }\n                break;\n            case 'phone_number':\n                if (field.dialCode) {\n                    this.phoneNumber.countryDialCodeValue = field.dialCode;\n                }\n                this.phoneNumber.phoneNumberValue = field.value;\n                break;\n            case 'password':\n                if (field.value === undefined) {\n                    formAttributes.password = '';\n                }\n                else {\n                    formAttributes.password = field.value;\n                }\n                break;\n        }\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-form-section\", { headerText: I18n.get(this.headerText), handleSubmit: this.handleSubmit, testDataPrefix: 'sign-in' }, h(\"div\", { slot: \"subtitle\" }, h(\"slot\", { name: \"header-subtitle\" })), h(\"slot\", { name: \"federated-buttons\" }, h(\"amplify-federated-buttons\", { handleAuthStateChange: this.handleAuthStateChange, federated: this.federated })), !isEmpty(this.federated) && h(\"amplify-strike\", null, \"or\"), h(\"amplify-auth-fields\", { formFields: this.newFormFields }), h(\"div\", { slot: \"amplify-form-section-footer\", class: \"sign-in-form-footer\" }, h(\"slot\", { name: \"footer\" }, !this.hideSignUp && (h(\"slot\", { name: \"secondary-footer-content\" }, h(\"span\", null, I18n.get(Translations.NO_ACCOUNT_TEXT), ' ', h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignUp), \"data-test\": \"sign-in-create-account-link\" }, I18n.get(Translations.CREATE_ACCOUNT_TEXT))))), h(\"div\", { class: this.hideSignUp ? 'full-width-footer-content' : '' }, h(\"slot\", { name: \"primary-footer-content\" }, h(\"amplify-button\", { type: \"submit\", disabled: this.loading, \"data-test\": \"sign-in-sign-in-button\" }, this.loading ? (h(\"amplify-loading-spinner\", null)) : (h(\"span\", null, I18n.get(this.submitButtonText)))))))))));\n    }\n    static get watchers() { return {\n        \"formFields\": [\"formFieldsHandler\"]\n    }; }\n};\nAmplifySignIn.style = amplifySignInCss;\n\nconst amplifySignUpCss = \"amplify-sign-up{--footer-font-family:var(--amplify-font-family);--footer-font-size:var(--amplify-text-sm);--footer-color:var(--amplify-grey);--font-weight:var(--amplify-font-weight)}.sign-up-form-footer{font-family:var(--footer-font-family);font-size:var(--footer-font-size);color:var(--footer-color);font-weight:--font-weight;display:-ms-flexbox;display:flex;-ms-flex-direction:column-reverse;flex-direction:column-reverse;-ms-flex-align:center;align-items:center;-ms-flex-pack:distribute;justify-content:space-around}.sign-up-form-footer amplify-button{margin-bottom:0.625rem}@media (min-width: 672px){.sign-up-form-footer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:baseline;align-items:baseline}.sign-up-form-footer amplify-button{margin-bottom:0}}.sign-up-form-footer *+*{margin-bottom:15px}\";\n\nconst AmplifySignUp = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Fires when sign up form is submitted */\n        this.handleSubmit = event => this.signUp(event);\n        /** Override for handling the Auth.SignUp API call */\n        this.handleSignUp = params => this.authSignUp(params);\n        /** Used for header text in sign up component */\n        this.headerText = Translations.SIGN_UP_HEADER_TEXT;\n        /** Used for the submit button text in sign up component */\n        this.submitButtonText = Translations.SIGN_UP_SUBMIT_BUTTON_TEXT;\n        /** Used for the submit button text in sign up component */\n        this.haveAccountText = Translations.SIGN_UP_HAVE_ACCOUNT_TEXT;\n        /** Text used for the sign in hyperlink */\n        this.signInText = Translations.SIGN_IN_TEXT;\n        /**\n         * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.\n         * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing\n         * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.\n         * ```\n         * [\n         *  {\n         *    type: string,\n         *    label: string,\n         *    placeholder: string,\n         *    hint: string | Functional Component | null,\n         *    required: boolean\n         *  }\n         * ]\n         * ```\n         */\n        this.formFields = [];\n        /** Auth state change handler for this component\n         * e.g. SignIn -> 'Create Account' link -> SignUp\n         */\n        // prettier-ignore\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */\n        this.usernameAlias = 'username';\n        // private userInput: string | PhoneNumberInterface;\n        this.newFormFields = [];\n        this.phoneNumber = {\n            countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n            phoneNumberValue: null,\n        };\n        this.loading = false;\n        this.signUpAttributes = {\n            username: '',\n            password: '',\n            attributes: {},\n        };\n    }\n    handleFormFieldInputChange(fieldType) {\n        switch (fieldType) {\n            case 'username':\n                return event => (this.signUpAttributes.username = event.target.value);\n            case 'password':\n                return event => (this.signUpAttributes.password = event.target.value);\n            case 'email':\n                return event => (this.signUpAttributes.attributes.email = event.target.value);\n            case 'phone_number':\n                return event => handlePhoneNumberChange(event, this.phoneNumber);\n            default:\n                return event => (this.signUpAttributes.attributes[fieldType] = event.target.value);\n        }\n    }\n    handleFormFieldInputWithCallback(event, field) {\n        const fnToCall = field['handleInputChange']\n            ? field['handleInputChange']\n            : (event, cb) => {\n                cb(event);\n            };\n        const callback = this.handleFormFieldInputChange(field.type);\n        fnToCall(event, callback.bind(this));\n    }\n    async authSignUp(params) {\n        const data = await Auth.signUp(params);\n        if (!data) {\n            throw new Error(Translations.SIGN_UP_FAILED);\n        }\n        return data;\n    }\n    assignPhoneNumberToSignUpAttributes() {\n        if (this.phoneNumber.phoneNumberValue) {\n            try {\n                this.signUpAttributes.attributes.phone_number = composePhoneNumberInput(this.phoneNumber);\n            }\n            catch (error) {\n                dispatchToastHubEvent(error);\n            }\n        }\n    }\n    assignUserNameAliasToSignUpAttributes() {\n        switch (this.usernameAlias) {\n            case 'email':\n            case 'phone_number':\n                this.signUpAttributes.username = this.signUpAttributes.attributes[this.usernameAlias];\n                break;\n        }\n    }\n    assignFormInputToSignUpAttributes() {\n        this.assignPhoneNumberToSignUpAttributes();\n        this.assignUserNameAliasToSignUpAttributes();\n    }\n    validateSignUpAttributes() {\n        if (!this.signUpAttributes.username) {\n            if (this.usernameAlias === UsernameAlias.email) {\n                throw new Error(Translations.EMPTY_EMAIL);\n            }\n            else if (this.usernameAlias === UsernameAlias.phone_number) {\n                throw new Error(Translations.EMPTY_PHONE);\n            }\n            else {\n                throw new Error(Translations.EMPTY_USERNAME);\n            }\n        }\n        if (this.signUpAttributes.username.indexOf(' ') >= 0) {\n            throw new Error(Translations.USERNAME_REMOVE_WHITESPACE);\n        }\n        if (this.signUpAttributes.password !== this.signUpAttributes.password.trim()) {\n            throw new Error(Translations.PASSWORD_REMOVE_WHITESPACE);\n        }\n    }\n    // TODO: Add validation\n    // TODO: Prefix\n    async signUp(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        if (!Auth || typeof Auth.signUp !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        this.assignFormInputToSignUpAttributes();\n        try {\n            this.validateSignUpAttributes();\n            const data = await this.handleSignUp(this.signUpAttributes);\n            if (data.userConfirmed) {\n                await handleSignIn(this.signUpAttributes.username, this.signUpAttributes.password, this.handleAuthStateChange);\n            }\n            else {\n                const signUpAttrs = Object.assign({}, this.signUpAttributes);\n                this.handleAuthStateChange(AuthState.ConfirmSignUp, Object.assign(Object.assign({}, data.user), { signUpAttrs }));\n            }\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    buildDefaultFormFields() {\n        switch (this.usernameAlias) {\n            case 'email':\n                this.newFormFields = [\n                    {\n                        type: 'email',\n                        placeholder: I18n.get(Translations.SIGN_UP_EMAIL_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('email'),\n                        inputProps: {\n                            'data-test': 'sign-up-email-input',\n                            autocomplete: 'username',\n                        },\n                    },\n                    {\n                        type: 'password',\n                        placeholder: I18n.get(Translations.SIGN_UP_PASSWORD_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('password'),\n                        inputProps: {\n                            'data-test': 'sign-up-password-input',\n                            autocomplete: 'new-password',\n                        },\n                    },\n                    {\n                        type: 'phone_number',\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('phone_number'),\n                        inputProps: {\n                            'data-test': 'sign-up-phone-number-input',\n                            autocomplete: 'tel-national',\n                        },\n                    },\n                ];\n                break;\n            case 'phone_number':\n                this.newFormFields = [\n                    {\n                        type: 'phone_number',\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('phone_number'),\n                        inputProps: {\n                            'data-test': 'sign-up-phone-number-input',\n                            autocomplete: 'username',\n                        },\n                    },\n                    {\n                        type: 'password',\n                        placeholder: I18n.get(Translations.SIGN_UP_PASSWORD_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('password'),\n                        inputProps: {\n                            'data-test': 'sign-up-password-input',\n                            autocomplete: 'new-password',\n                        },\n                    },\n                    {\n                        type: 'email',\n                        placeholder: I18n.get(Translations.SIGN_UP_EMAIL_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('email'),\n                        inputProps: {\n                            'data-test': 'sign-up-email-input',\n                            autocomplete: 'email',\n                        },\n                    },\n                ];\n                break;\n            case 'username':\n            default:\n                this.newFormFields = [\n                    {\n                        type: 'username',\n                        placeholder: I18n.get(Translations.SIGN_UP_USERNAME_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('username'),\n                        inputProps: {\n                            'data-test': 'sign-up-username-input',\n                            autocomplete: 'username',\n                        },\n                    },\n                    {\n                        type: 'password',\n                        placeholder: I18n.get(Translations.SIGN_UP_PASSWORD_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('password'),\n                        inputProps: {\n                            'data-test': 'sign-up-password-input',\n                            autocomplete: 'new-password',\n                        },\n                    },\n                    {\n                        type: 'email',\n                        placeholder: I18n.get(Translations.SIGN_UP_EMAIL_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('email'),\n                        inputProps: {\n                            'data-test': 'sign-up-email-input',\n                        },\n                    },\n                    {\n                        type: 'phone_number',\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('phone_number'),\n                        inputProps: {\n                            'data-test': 'sign-up-phone-number-input',\n                        },\n                    },\n                ];\n                break;\n        }\n    }\n    buildFormFields() {\n        if (this.formFields.length === 0) {\n            this.buildDefaultFormFields();\n        }\n        else {\n            const newFields = [];\n            this.formFields.forEach(field => {\n                const newField = Object.assign({}, field);\n                newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);\n                this.setFieldValue(field, this.signUpAttributes);\n                newFields.push(newField);\n            });\n            this.newFormFields = newFields;\n        }\n    }\n    setFieldValue(field, formAttributes) {\n        switch (field.type) {\n            case 'username':\n                if (field.value === undefined) {\n                    formAttributes.username = '';\n                }\n                else {\n                    formAttributes.username = field.value;\n                }\n                break;\n            case 'password':\n                if (field.value === undefined) {\n                    formAttributes.password = '';\n                }\n                else {\n                    formAttributes.password = field.value;\n                }\n                break;\n            case 'email':\n                formAttributes.attributes.email = field.value;\n                break;\n            case 'phone_number':\n                if (field.dialCode) {\n                    this.phoneNumber.countryDialCodeValue = field.dialCode;\n                }\n                this.phoneNumber.phoneNumberValue = field.value;\n                break;\n            default:\n                formAttributes.attributes[field.type] = field.value;\n                break;\n        }\n    }\n    componentWillLoad() {\n        checkUsernameAlias(this.usernameAlias);\n        this.buildFormFields();\n    }\n    formFieldsHandler() {\n        this.buildFormFields();\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-form-section\", { headerText: I18n.get(this.headerText), handleSubmit: this.handleSubmit, testDataPrefix: 'sign-up' }, h(\"div\", { slot: \"subtitle\" }, h(\"slot\", { name: \"header-subtitle\" })), h(\"amplify-auth-fields\", { formFields: this.newFormFields }), h(\"div\", { class: \"sign-up-form-footer\", slot: \"amplify-form-section-footer\" }, h(\"slot\", { name: \"footer\" }, h(\"slot\", { name: \"secondary-footer-content\" }, h(\"span\", null, I18n.get(this.haveAccountText), ' ', h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignIn), \"data-test\": \"sign-up-sign-in-link\" }, I18n.get(this.signInText)))), h(\"slot\", { name: \"primary-footer-content\" }, h(\"amplify-button\", { type: \"submit\", \"data-test\": \"sign-up-create-account-button\", disabled: this.loading }, this.loading ? (h(\"amplify-loading-spinner\", null)) : (h(\"span\", null, I18n.get(this.submitButtonText))))))))));\n    }\n    static get watchers() { return {\n        \"formFields\": [\"formFieldsHandler\"]\n    }; }\n};\nAmplifySignUp.style = amplifySignUpCss;\n\nconst logger$2 = new Logger('AmplifyVerifyContact');\nconst AmplifyVerifyContact = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Authentication state handler */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        this.loading = false;\n    }\n    handleSubmit(event) {\n        event.preventDefault();\n        this.verifyAttr ? this.submit(this.code) : this.verify(this.contact);\n    }\n    async submit(code) {\n        const attr = this.verifyAttr;\n        if (!Auth || typeof Auth.verifyCurrentUserAttributeSubmit !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            const data = await Auth.verifyCurrentUserAttributeSubmit(attr, code);\n            logger$2.debug(data);\n            this.handleAuthStateChange(AuthState.SignedIn, this.user);\n            this.verifyAttr = null;\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n            logger$2.error(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    async verify(contact) {\n        if (!contact) {\n            logger$2.error('Neither Email nor Phone Number selected');\n            return;\n        }\n        if (!Auth || typeof Auth.verifyCurrentUserAttribute !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            const data = await Auth.verifyCurrentUserAttribute(contact);\n            logger$2.debug(data);\n            this.verifyAttr = contact;\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n            logger$2.error(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    handleInputChange(event) {\n        const inputName = event.target.name;\n        if (inputName === 'code') {\n            this.code = event.target.value;\n        }\n        else if (inputName === 'contact') {\n            this.contact = event.target.value;\n        }\n    }\n    renderSubmit() {\n        return (h(\"div\", null, h(\"amplify-input\", { inputProps: {\n                autocomplete: 'off',\n                'data-test': 'verify-contact-code-input',\n            }, name: \"code\", placeholder: I18n.get(Translations.CODE_PLACEHOLDER), handleInputChange: event => this.handleInputChange(event) })));\n    }\n    renderVerify() {\n        const user = this.user;\n        if (!user) {\n            logger$2.debug('No user to verify');\n            return null;\n        }\n        const { unverified } = user;\n        if (!unverified) {\n            logger$2.debug('Unverified variable does not exist on user');\n            return null;\n        }\n        const { email, phone_number } = unverified;\n        return (h(\"div\", null, email && (h(\"amplify-radio-button\", { label: I18n.get(Translations.VERIFY_CONTACT_EMAIL_LABEL), key: \"email\", name: \"contact\", value: \"email\", handleInputChange: event => this.handleInputChange(event), inputProps: {\n                'data-test': 'verify-contact-email-radio',\n            } })), phone_number && (h(\"amplify-radio-button\", { label: I18n.get(Translations.VERIFY_CONTACT_PHONE_LABEL), key: \"phone_number\", name: \"contact\", value: \"phone_number\", handleInputChange: event => this.handleInputChange(event), inputProps: {\n                'data-test': 'verify-contact-phone-number-radio',\n            } }))));\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-form-section\", { handleSubmit: event => this.handleSubmit(event), headerText: I18n.get(Translations.VERIFY_CONTACT_HEADER_TEXT), loading: this.loading, secondaryFooterContent: h(\"span\", null, h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignedIn, this.user), \"data-test\": \"verify-contact-skip-link\" }, \"Skip\")), submitButtonText: this.verifyAttr\n                ? I18n.get(Translations.VERIFY_CONTACT_SUBMIT_LABEL)\n                : I18n.get(Translations.VERIFY_CONTACT_VERIFY_LABEL) }, this.verifyAttr ? this.renderSubmit() : this.renderVerify())));\n    }\n};\n\nexport { AmplifyConfirmSignIn as amplify_confirm_sign_in, AmplifyConfirmSignUp as amplify_confirm_sign_up, AmplifyForgotPassword as amplify_forgot_password, AmplifyRequireNewPassword as amplify_require_new_password, AmplifySignIn as amplify_sign_in, AmplifySignUp as amplify_sign_up, AmplifyVerifyContact as amplify_verify_contact };\n"],"names":["r","registerInstance","h","H","Host","I18n","Logger","ConsoleLogger","isEmpty","M","MfaOption","C","ChallengeName","A","AuthState","a","AuthFormField","U","UsernameAlias","Auth","T","Translations","N","NO_AUTH_MODULE_FOUND","g","COUNTRY_DIAL_CODE_DEFAULT","b","PHONE_SUFFIX","d","dispatchAuthStateChangeEvent","dispatchToastHubEvent","c","checkUsernameAlias","i","isHintValid","handlePhoneNumberChange","composePhoneNumberInput","getRequiredAttributesMap","checkContact","handleSignIn","AmplifyConfirmSignIn","hostRef","handleSubmit","event","confirm","headerText","CONFIRM_SMS_CODE","submitButtonText","CONFIRM","handleAuthStateChange","defaultFormFields","type","required","handleInputChange","handleCodeChange","formFields","mfaOption","SMS","loading","setup","user","SoftwareTokenMFA","TOTP","CONFIRM_TOTP_CODE","constructedFormFieldOptions","constructFormFieldOptions","code","target","value","preventDefault","mfaType","confirmSignIn","Error","content","undefined","length","forEach","formField","push","Object","assign","get","secondaryFooterContent","variant","onClick","SignIn","BACK_TO_SIGN_IN","AmplifyConfirmSignUp","confirmSignUp","CONFIRM_SIGN_UP_HEADER_TEXT","CONFIRM_SIGN_UP_SUBMIT_BUTTON_TEXT","usernameAlias","newFormFields","phoneNumber","countryDialCodeValue","phoneNumberValue","buildFormFields","userInput","username","_signUpAttrs","signUpAttrs","handleFormFieldInputChange","disabled","inputProps","autocomplete","label","CONFIRM_SIGN_UP_CODE_LABEL","placeholder","CONFIRM_SIGN_UP_CODE_PLACEHOLDER","hint","CONFIRM_SIGN_UP_LOST_CODE","resendConfirmCode","CONFIRM_SIGN_UP_RESEND_CODE","buildDefaultFormFields","newFields","field","newField","handleFormFieldInputWithCallback","fieldType","dialCode","fnToCall","cb","callback","bind","resendSignUp","getUsername","EMPTY_USERNAME","trim","confirmSignUpResult","CONFIRM_SIGN_UP_FAILED","password","logger","AmplifyForgotPassword","RESET_YOUR_PASSWORD","sendButtonText","SEND_CODE","SUBMIT","handleSend","send","submit","delivery","forgotPasswordAttrs","formAttributes","forgotPassword","error","data","debug","NEW_PASSWORD_LABEL","NEW_PASSWORD_PLACEHOLDER","CodeDeliveryDetails","forgotPasswordSubmit","submitFn","testDataPrefix","logger$1","AmplifyRequireNewPassword","CHANGE_PASSWORD","CHANGE_PASSWORD_ACTION","completeNewPassword","Password","handlePasswordChange","requiredAttributes","setCurrentUser","attribute","formatPhoneNumber","currentAuthenticatedUser","currentUser","challengeParam","userRequiredAttributes","requiredAttributesMap","handleRequiredAttributeInputChange","name","composedInput","err","challengeName","SMSMFA","MFASetup","ConfirmSignIn","TOTPSetup","amplifySignInCss","AmplifySignIn","signIn","SIGN_IN_HEADER_TEXT","SIGN_IN_ACTION","hideSignUp","signInAttributes","formFieldInputs","FORGOT_PASSWORD_TEXT","ForgotPassword","RESET_PASSWORD_TEXT","setFieldValue","slot","federated","class","NO_ACCOUNT_TEXT","SignUp","CREATE_ACCOUNT_TEXT","style","amplifySignUpCss","AmplifySignUp","signUp","handleSignUp","params","authSignUp","SIGN_UP_HEADER_TEXT","SIGN_UP_SUBMIT_BUTTON_TEXT","haveAccountText","SIGN_UP_HAVE_ACCOUNT_TEXT","signInText","SIGN_IN_TEXT","signUpAttributes","attributes","email","SIGN_UP_FAILED","phone_number","assignPhoneNumberToSignUpAttributes","assignUserNameAliasToSignUpAttributes","EMPTY_EMAIL","EMPTY_PHONE","indexOf","USERNAME_REMOVE_WHITESPACE","PASSWORD_REMOVE_WHITESPACE","assignFormInputToSignUpAttributes","validateSignUpAttributes","userConfirmed","ConfirmSignUp","SIGN_UP_EMAIL_PLACEHOLDER","SIGN_UP_PASSWORD_PLACEHOLDER","SIGN_UP_USERNAME_PLACEHOLDER","logger$2","AmplifyVerifyContact","verifyAttr","verify","contact","attr","verifyCurrentUserAttributeSubmit","SignedIn","verifyCurrentUserAttribute","inputName","CODE_PLACEHOLDER","unverified","VERIFY_CONTACT_EMAIL_LABEL","key","VERIFY_CONTACT_PHONE_LABEL","VERIFY_CONTACT_HEADER_TEXT","VERIFY_CONTACT_SUBMIT_LABEL","VERIFY_CONTACT_VERIFY_LABEL","renderSubmit","renderVerify","amplify_confirm_sign_in","amplify_confirm_sign_up","amplify_forgot_password","amplify_require_new_password","amplify_sign_in","amplify_sign_up","amplify_verify_contact"],"sourceRoot":"webpack:///"}