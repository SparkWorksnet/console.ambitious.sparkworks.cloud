{"version":3,"file":"node_modules_aws-amplify_ui-components_dist_esm_amplify-form-field_4_entry_js.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMW,mBAAmB,GAAG,mTAA5B;;AAEA,IAAMC,gBAAgB;AAClB,4BAAYC,OAAZ,EAAqB;AAAA;;AACjBZ,IAAAA,qDAAgB,CAAC,IAAD,EAAOY,OAAP,CAAhB;AACA;;AACA,SAAKC,IAAL,GAAY,MAAZ;AACA;;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA;;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACH;;AATiB;AAAA;AAAA,WAUlB,kBAAS;AACL,aAAQd,qDAAC,CAAC,KAAD,EAAQ;AAAEe,QAAAA,KAAK,EAAE;AAAT,OAAR,EAAiC,KAAKC,KAAL,IAAehB,qDAAC,CAAC,KAAD,EAAQ;AAAEe,QAAAA,KAAK,EAAE;AAAT,OAAR,EAAuCf,qDAAC,CAAC,eAAD,EAAkB;AAAEiB,QAAAA,OAAO,EAAE,KAAKC;AAAhB,OAAlB,EAA6C,KAAKF,KAAlD,CAAxC,CAAjD,EAAqJ,KAAKG,WAAL,IAAqBnB,qDAAC,CAAC,KAAD,EAAQ;AAAEoB,QAAAA,EAAE,YAAK,KAAKF,OAAV,iBAAJ;AAAqCH,QAAAA,KAAK,EAAE,wBAA5C;AAAsE,qBAAa;AAAnF,OAAR,EAAuH,KAAKI,WAA5H,CAA3K,EAAsTnB,qDAAC,CAAC,KAAD,EAAQ,IAAR,EAAcA,qDAAC,CAAC,MAAD,EAAS;AAAEqB,QAAAA,IAAI,EAAE;AAAR,OAAT,EAA4BrB,qDAAC,CAAC,eAAD,EAAkB;AAAEkB,QAAAA,OAAO,EAAE,KAAKA,OAAhB;AAAyBC,QAAAA,WAAW,EAAE,KAAKA,WAA3C;AAAwDP,QAAAA,IAAI,EAAE,KAAKA,IAAnE;AAAyEU,QAAAA,iBAAiB,EAAE,KAAKA,iBAAjG;AAAoHR,QAAAA,WAAW,EAAE,KAAKA,WAAtI;AAAmJO,QAAAA,IAAI,EAAE,KAAKA,IAA9J;AAAoKE,QAAAA,KAAK,EAAE,KAAKA,KAAhL;AAAuLC,QAAAA,UAAU,EAAE,KAAKA,UAAxM;AAAoNC,QAAAA,QAAQ,EAAE,KAAKA,QAAnO;AAA6OZ,QAAAA,QAAQ,EAAE,KAAKA;AAA5P,OAAlB,CAA7B,CAAf,CAAvT,EAAgoB,KAAKa,IAAL,IAAc1B,qDAAC,CAAC,cAAD,EAAiB;AAAEoB,QAAAA,EAAE,YAAK,KAAKF,OAAV;AAAJ,OAAjB,EAAiD,KAAKQ,IAAtD,CAA/oB,CAAT;AACH;AAZiB;;AAAA;AAAA,GAAtB;;AAcAhB,gBAAgB,CAACiB,KAAjB,GAAyBlB,mBAAzB;AAEA,IAAMmB,cAAc,GAAG,kSAAvB;;AAEA,IAAMC,WAAW;AACb,uBAAYlB,OAAZ,EAAqB;AAAA;;AACjBZ,IAAAA,qDAAgB,CAAC,IAAD,EAAOY,OAAP,CAAhB;AACH;;AAHY;AAAA;AAAA,WAIb,kBAAS;AACL,aAAQX,qDAAC,CAAC,KAAD,EAAQ;AAAEe,QAAAA,KAAK,EAAE;AAAT,OAAR,EAA2Bf,qDAAC,CAAC,MAAD,EAAS,IAAT,CAA5B,CAAT;AACH;AANY;;AAAA;AAAA,GAAjB;;AAQA6B,WAAW,CAACF,KAAZ,GAAoBC,cAApB;AAEA,IAAME,eAAe,GAAG,2wBAAxB;;AAEA,IAAMC,YAAY;AACd,wBAAYpB,OAAZ,EAAqB;AAAA;;AACjBZ,IAAAA,qDAAgB,CAAC,IAAD,EAAOY,OAAP,CAAhB;AACA;;AACA,SAAKC,IAAL,GAAY,MAAZ;AACA;;AACA,SAAKU,iBAAL,GAAyB;AAAA,aAAM,KAAK,CAAX;AAAA,KAAzB;AACA;;;AACA,SAAKR,WAAL,GAAmB,EAAnB;AACA;;AACA,SAAKD,QAAL,GAAgB,KAAhB;AACA;;AACA,SAAKmB,aAAL,GAAqB,KAArB;AACH;AACD;AACJ;AACA;;;AAhBkB;AAAA;AAAA,WAiBd,8BAAqBT,KAArB,EAA4B;AACxB,UAAMU,KAAK,GAAG,KAAKC,EAAL,CAAQC,aAAR,CAAsB,OAAtB,CAAd;AACA,UAAI,CAACF,KAAL,EACI;AACJA,MAAAA,KAAK,CAACV,KAAN,GAAcA,KAAd,CAJwB,CAKxB;;AACAU,MAAAA,KAAK,CAACG,aAAN,CAAoB,IAAIC,KAAJ,CAAU,OAAV,CAApB;AACA,WAAKL,aAAL,GAAqB,IAArB;AACH;AACD;AACJ;AACA;AACA;;AA7BkB;AAAA;AAAA,WA8Bd,6BAAoBM,WAApB,EAAiC;AAAA;;AAC7B,UAAI,CAACA,WAAL,EACI;;AACJ,UAAIA,WAAW,CAACf,KAAhB,EAAuB;AACnB;AACA,aAAKgB,oBAAL,CAA0BD,WAAW,CAACf,KAAtC;AACH,OAHD,MAIK;AACD;AACAe,QAAAA,WAAW,CAACE,gBAAZ,CAA6B,OAA7B,EAAsC,UAAAnC,CAAC,EAAI;AACvC,cAAMkB,KAAK,GAAGlB,CAAC,CAACoC,MAAF,CAASlB,KAAvB;;AACA,eAAI,CAACgB,oBAAL,CAA0BhB,KAA1B;AACH,SAHD;AAIH;AACJ;AA5Ca;AAAA;AAAA,WA6Cd,gCAAuB;AACnB,WAAKmB,iBAAL,IAA0B,KAAKA,iBAAL,EAA1B,CADmB,CACiC;AACvD;AA/Ca;AAAA;AAAA,WAgDd,6BAAoB;AAAA;;AAChB;AACA,UAAI,CAACpC,uDAAc,CAAC,uBAAD,EAA0B,KAAK4B,EAA/B,CAAnB,EACI;AACJ,WAAKQ,iBAAL,GAAyBlC,uDAAmB,CAAC,YAAM;AAC/C;AACZ;AACA;AACA;AACA;AACA;AACY,YAAMyB,KAAK,GAAG,MAAI,CAACC,EAAL,CAAQC,aAAR,CAAsB,OAAtB,CAAd;;AACA,YAAIF,KAAJ,EACIA,KAAK,CAACV,KAAN,GAAc,EAAd;AACJ,cAAI,CAACS,aAAL,GAAqB,KAArB;AACH,OAX2C,CAA5C;AAYH;AAhEa;AAAA;AAAA,WAiEd,4BAAmB;AACf;AACA,UAAI,KAAKA,aAAL,IAAsB,KAAKT,KAA/B,EACI;AACJ,UAAI,UAAUoB,IAAV,CAAeC,SAAS,CAACC,SAAzB,CAAJ,EACI,OALW,CAKH;;AACZ,UAAMC,SAAS,GAAGxC,uDAAc,CAAC,wBAAD,EAA2B,KAAK4B,EAAhC,CAAhC;AACA,UAAMa,MAAM,GAAGzC,uDAAc,CAAC,iBAAD,EAAoB,KAAK4B,EAAzB,CAA7B,CAPe,CAQf;;AACA,UAAI,CAACY,SAAD,IAAc,CAACC,MAAnB,EACI;AACJ,UAAMC,QAAQ,GAAGF,SAAS,CAACX,aAAV,CAAwB,wBAAxB,CAAjB;AACA,UAAMc,QAAQ,GAAGH,SAAS,CAACX,aAAV,CAAwB,wBAAxB,CAAjB;;AACA,UAAI,KAAKd,IAAL,KAAc,UAAd,IACA,KAAKA,IAAL,KAAc,OADd,IAEA,KAAKA,IAAL,KAAc,OAFlB,EAE2B;AACvB,aAAK6B,mBAAL,CAAyBF,QAAzB;AACH,OAJD,MAKK,IAAI,KAAK3B,IAAL,KAAc,UAAlB,EAA8B;AAC/B,aAAK6B,mBAAL,CAAyBD,QAAzB;AACH;AACJ;AAtFa;AAAA;AAAA,WAuFd,kBAAS;AAAA;;AACL,aAAQjD,qDAAC,CAACE,iDAAD,EAAO;AAAEa,QAAAA,KAAK,EAAE;AAAT,OAAP,EAAgCf,qDAAC,CAAC,OAAD,EAAUmD,MAAM,CAACC,MAAP,CAAc;AAAEhC,QAAAA,EAAE,EAAE,KAAKF,OAAX;AAAoB,4BAAoB,KAAKA,OAAL,IAAgB,KAAKC,WAArB,aAC7F,KAAKD,OADwF,oBAEhG,IAFwD;AAElD,8BAAsB,KAAKc,aAFuB;AAERpB,QAAAA,IAAI,EAAE,KAAKA,IAFH;AAESyC,QAAAA,OAAO,EAAE,iBAAAC,KAAK,EAAI;AACrF,gBAAI,CAACtB,aAAL,GAAqB,KAArB;;AACA,gBAAI,CAACV,iBAAL,CAAuBgC,KAAvB;AACH,SAL6D;AAK3DxC,QAAAA,WAAW,EAAE,KAAKA,WALyC;AAK5BO,QAAAA,IAAI,EAAE,KAAKA,IALiB;AAKXN,QAAAA,KAAK,EAAE,OALI;AAKKQ,QAAAA,KAAK,EAAE,KAAKA,KALjB;AAKwBE,QAAAA,QAAQ,EAAE,KAAKA,QALvC;AAKiDZ,QAAAA,QAAQ,EAAE,KAAKA;AALhE,OAAd,EAK0F,KAAKW,UAL/F,CAAV,CAAjC,CAAT;AAMH;AA9Fa;AAAA;AAAA,SA+Fd,eAAS;AAAE,aAAOpB,qDAAU,CAAC,IAAD,CAAjB;AAA0B;AA/FvB;;AAAA;AAAA,GAAlB;;AAiGA2B,YAAY,CAACJ,KAAb,GAAqBG,eAArB;AAEA,IAAMyB,eAAe,GAAG,yIAAxB;;AAEA,IAAMC,YAAY;AACd,wBAAY7C,OAAZ,EAAqB;AAAA;;AACjBZ,IAAAA,qDAAgB,CAAC,IAAD,EAAOY,OAAP,CAAhB;AACH;;AAHa;AAAA;AAAA,WAId,kBAAS;AACL,aAAQX,qDAAC,CAAC,OAAD,EAAU;AAAEe,QAAAA,KAAK,EAAE,OAAT;AAAkBE,QAAAA,OAAO,EAAE,KAAKA;AAAhC,OAAV,EAAqDjB,qDAAC,CAAC,MAAD,EAAS,IAAT,CAAtD,CAAT;AACH;AANa;;AAAA;AAAA,GAAlB;;AAQAwD,YAAY,CAAC7B,KAAb,GAAqB4B,eAArB","sources":["./node_modules/@aws-amplify/ui-components/dist/esm/amplify-form-field_4.entry.js"],"sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-83f2275b.js';\nimport '@aws-amplify/core';\nimport './auth-types-78df304e.js';\nimport '@aws-amplify/auth';\nimport './Translations-c833f663.js';\nimport './constants-c8ecaa24.js';\nimport { e as closestElement, o as onAuthUIStateChange } from './helpers-9703fe65.js';\n\nconst amplifyFormFieldCss = \"amplify-form-field{--label-font-size:var(--amplify-text-md);--description-font-size:var(--amplify-text-sm)}.form-field{margin-bottom:15px}.form-field-label{display:block;font-size:var(--label-font-size);padding-bottom:0.5em}.form-field-description{font-size:var(--description-font-size);padding-top:0.5em}\";\n\nconst AmplifyFormField = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** The input type.  Can be any HTML input type. */\n        this.type = 'text';\n        /** The required flag in order to make an input required prior to submitting a form */\n        this.required = false;\n        /** (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users. */\n        this.placeholder = '';\n    }\n    render() {\n        return (h(\"div\", { class: \"form-field\" }, this.label && (h(\"div\", { class: \"form-field-label\" }, h(\"amplify-label\", { htmlFor: this.fieldId }, this.label))), this.description && (h(\"div\", { id: `${this.fieldId}-description`, class: \"form-field-description\", \"data-test\": \"form-field-description\" }, this.description)), h(\"div\", null, h(\"slot\", { name: \"input\" }, h(\"amplify-input\", { fieldId: this.fieldId, description: this.description, type: this.type, handleInputChange: this.handleInputChange, placeholder: this.placeholder, name: this.name, value: this.value, inputProps: this.inputProps, disabled: this.disabled, required: this.required }))), this.hint && (h(\"amplify-hint\", { id: `${this.fieldId}-hint` }, this.hint))));\n    }\n};\nAmplifyFormField.style = amplifyFormFieldCss;\n\nconst amplifyHintCss = \":host{--color:var(--amplify-grey);--font-family:var(--amplify-font-family);--font-size:var(--amplify-text-xs);--font-weight:var(--amplify-font-weight)}.hint{color:var(--color);font-family:var(--font-family);font-weight:var(--font-weight);font-size:var(--font-size);margin-bottom:2.625rem}\";\n\nconst AmplifyHint = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    render() {\n        return (h(\"div\", { class: \"hint\" }, h(\"slot\", null)));\n    }\n};\nAmplifyHint.style = amplifyHintCss;\n\nconst amplifyInputCss = \"amplify-input{--color:var(--amplify-secondary-color);--background-color:var(--amplify-secondary-contrast);--border-color:var(--amplify-light-grey);--border-color-focus:var(--amplify-primary-color);--border:1px solid var(--border-color);--margin:0 0 0.625rem 0}[data-autocompleted]{background-color:#e8f0fe !important}.input-host{width:100%}.input{display:block;width:100%;padding:1rem;font-size:var(--amplify-text-sm);color:var(--color);background-color:var(--background-color);background-image:none;border:var(--border);border-radius:3px;-webkit-box-sizing:border-box;box-sizing:border-box;margin:var(--margin);height:3.125rem;line-height:1.1;-webkit-box-shadow:none;box-shadow:none}.input:focus{outline:none;border-color:var(--border-color-focus)}.input:disabled{opacity:0.5}\";\n\nconst AmplifyInput = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** The input type.  Can be any HTML input type. */\n        this.type = 'text';\n        /** The callback, called when the input is modified by the user. */\n        this.handleInputChange = () => void 0;\n        /** (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users. */\n        this.placeholder = '';\n        /** Whether the input is a required field */\n        this.required = false;\n        /** Whether the input has been autocompleted */\n        this.autoCompleted = false;\n    }\n    /**\n     * Sets the value of this input to the value in autofill input event.\n     */\n    setAutoCompleteValue(value) {\n        const input = this.el.querySelector('input');\n        if (!input)\n            return;\n        input.value = value;\n        // dispatch an input event from this element to the parent form\n        input.dispatchEvent(new Event('input'));\n        this.autoCompleted = true;\n    }\n    /**\n     * Checks if the target dummy input in `amplify-auth-container` is present have been autofilled.\n     * If so, we update this.value with the autofilled value.\n     */\n    checkAutoCompletion(targetInput) {\n        if (!targetInput)\n            return;\n        if (targetInput.value) {\n            // if value is already set, we set the value directly\n            this.setAutoCompleteValue(targetInput.value);\n        }\n        else {\n            // if value is not set, we start listening for it\n            targetInput.addEventListener('input', e => {\n                const value = e.target.value;\n                this.setAutoCompleteValue(value);\n            });\n        }\n    }\n    disconnectedCallback() {\n        this.removeHubListener && this.removeHubListener(); // stop listening to `onAuthUIStateChange`\n    }\n    componentWillLoad() {\n        // the below behaviors are only applicable if `amplify-input` is used by `amplify-authenticator`.\n        if (!closestElement('amplify-authenticator', this.el))\n            return;\n        this.removeHubListener = onAuthUIStateChange(() => {\n            /**\n             * When we're using slots, autofilled data will persist between different authState,\n             * even though input events are not triggered. This ends up in parent components\n             * not picking up input values. For now, we're emptying the input on authState change\n             * which is the existing behavior.\n             */\n            const input = this.el.querySelector('input');\n            if (input)\n                input.value = '';\n            this.autoCompleted = false;\n        });\n    }\n    componentDidLoad() {\n        // no-op if this field already has been autofilled or already has an value\n        if (this.autoCompleted || this.value)\n            return;\n        if (/Firefox/.test(navigator.userAgent))\n            return; // firefox autofill works\n        const container = closestElement('amplify-auth-container', this.el);\n        const signIn = closestElement('amplify-sign-in', this.el);\n        // only autocomplete if `amplify-auth-container` is present and input is under `sign-in`.\n        if (!container || !signIn)\n            return;\n        const username = container.querySelector(\"input[name='username']\");\n        const password = container.querySelector(\"input[name='password']\");\n        if (this.name === 'username' ||\n            this.name === 'email' ||\n            this.name === 'phone') {\n            this.checkAutoCompletion(username);\n        }\n        else if (this.name === 'password') {\n            this.checkAutoCompletion(password);\n        }\n    }\n    render() {\n        return (h(Host, { class: \"input-host\" }, h(\"input\", Object.assign({ id: this.fieldId, \"aria-describedby\": this.fieldId && this.description\n                ? `${this.fieldId}-description`\n                : null, \"data-autocompleted\": this.autoCompleted, type: this.type, onInput: event => {\n                this.autoCompleted = false;\n                this.handleInputChange(event);\n            }, placeholder: this.placeholder, name: this.name, class: \"input\", value: this.value, disabled: this.disabled, required: this.required }, this.inputProps))));\n    }\n    get el() { return getElement(this); }\n};\nAmplifyInput.style = amplifyInputCss;\n\nconst amplifyLabelCss = \":host{--label-color:var(--amplify-secondary-color)}.label{color:var(--label-color);font-size:var(--amplify-text-sm);margin-bottom:16px}\";\n\nconst AmplifyLabel = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    render() {\n        return (h(\"label\", { class: \"label\", htmlFor: this.htmlFor }, h(\"slot\", null)));\n    }\n};\nAmplifyLabel.style = amplifyLabelCss;\n\nexport { AmplifyFormField as amplify_form_field, AmplifyHint as amplify_hint, AmplifyInput as amplify_input, AmplifyLabel as amplify_label };\n"],"names":["r","registerInstance","h","H","Host","g","getElement","e","closestElement","o","onAuthUIStateChange","amplifyFormFieldCss","AmplifyFormField","hostRef","type","required","placeholder","class","label","htmlFor","fieldId","description","id","name","handleInputChange","value","inputProps","disabled","hint","style","amplifyHintCss","AmplifyHint","amplifyInputCss","AmplifyInput","autoCompleted","input","el","querySelector","dispatchEvent","Event","targetInput","setAutoCompleteValue","addEventListener","target","removeHubListener","test","navigator","userAgent","container","signIn","username","password","checkAutoCompletion","Object","assign","onInput","event","amplifyLabelCss","AmplifyLabel","amplify_form_field","amplify_hint","amplify_input","amplify_label"],"sourceRoot":"webpack:///"}