{"version":3,"file":"node_modules_aws-amplify_ui-components_dist_esm_amplify-s3-text_entry_js.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMa,gBAAgB,GAAG,4eAAzB;AAEA,IAAMC,MAAM,GAAG,IAAIX,6DAAJ,CAAW,QAAX,CAAf;;AACA,IAAMY,aAAa;AACf,yBAAYC,OAAZ,EAAqB;AAAA;;AACjBf,IAAAA,qDAAgB,CAAC,IAAD,EAAOe,OAAP,CAAhB;AACA;;AACA,SAAKC,WAAL,GAAmB,QAAnB;AACA;;AACA,SAAKC,KAAL,GAAaZ,gEAAb;AACA;;AACA,SAAKc,YAAL,GAAoBZ,8EAApB;AACH;;AATc;AAAA;AAAA;AAAA,gWAUf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACU,KAAKc,IAAL,EADV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAVe;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qWAaf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACU,KAAKA,IAAL,EADV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAbe;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wVAgBf;AAAA;AAAA;AAAA;AAAA;AAAA;AACYC,gBAAAA,IADZ,GAC2E,IAD3E,CACYA,IADZ,EACkBC,OADlB,GAC2E,IAD3E,CACkBA,OADlB,EAC2BC,IAD3B,GAC2E,IAD3E,CAC2BA,IAD3B,EACiCR,WADjC,GAC2E,IAD3E,CACiCA,WADjC,EAC8CC,KAD9C,GAC2E,IAD3E,CAC8CA,KAD9C,EACqDQ,KADrD,GAC2E,IAD3E,CACqDA,KADrD,EAC4DC,UAD5D,GAC2E,IAD3E,CAC4DA,UAD5D;;AAAA,sBAEQ,CAACH,OAAD,IAAY,CAACD,IAFrB;AAAA;AAAA;AAAA;;AAGQT,gBAAAA,MAAM,CAACc,KAAP,CAAa,wBAAb;AAHR;;AAAA;AAMUC,gBAAAA,GANV,GAMgBL,OAAO,IAAID,IAN3B;AAOIT,gBAAAA,MAAM,CAACc,KAAP,CAAa,aAAaC,GAAb,GAAmB,KAAhC;;AAPJ,qBAQQJ,IARR;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAScf,+DAAgB,CAACc,OAAD,EAAUC,IAAV,EAAgBP,KAAhB,EAAuBQ,KAAvB,EAA8BT,WAA9B,EAA2CH,MAA3C,CAT9B;;AAAA;AAAA;AAAA;AAAA,uBAYyBF,+DAAa,CAACiB,GAAD,EAAMX,KAAN,EAAaQ,KAAb,EAAoBC,UAApB,EAAgCb,MAAhC,CAZtC;;AAAA;AAYQ,qBAAKgB,GAZb;AAAA;AAAA;;AAAA;AAAA;AAAA;AAeQhB,gBAAAA,MAAM,CAACc,KAAP;AAfR,sBAgBc,IAAIG,KAAJ,cAhBd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAhBe;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,WAmCf,kBAAS;AACL,aAAQ7B,qDAAC,CAAC,KAAD,EAAQ,IAAR,EAAcA,qDAAC,CAAC,KAAD,EAAQ;AAAE8B,QAAAA,KAAK,EAAE;AAAT,OAAR,EAAqC,KAAKF,GAAL,GAAY5B,qDAAC,CAAC,KAAD,EAAQ,IAAR,EAAc,KAAK4B,GAAnB,CAAb,GAAyC5B,qDAAC,CAAC,KAAD,EAAQ,IAAR,EAAcE,wDAAA,CAAS,KAAKgB,YAAd,CAAd,CAA/E,CAAf,CAAT;AACH;AArCc;AAAA;AAAA,SAsCf,eAAsB;AAAE,aAAO;AAC3B,mBAAW,CAAC,cAAD,CADgB;AAE3B,gBAAQ,CAAC,cAAD;AAFmB,OAAP;AAGpB;AAzCW;;AAAA;AAAA,GAAnB;;AA2CAL,aAAa,CAACmB,KAAd,GAAsBrB,gBAAtB","sources":["./node_modules/@aws-amplify/ui-components/dist/esm/amplify-s3-text.entry.js"],"sourcesContent":["import { r as registerInstance, h } from './index-83f2275b.js';\nimport { Logger, I18n } from '@aws-amplify/core';\nimport { A as AccessLevel } from './storage-types-f257c0f2.js';\nimport '@aws-amplify/auth';\nimport { T as Translations } from './Translations-c833f663.js';\nimport './constants-c8ecaa24.js';\nimport '@aws-amplify/storage';\nimport { p as putStorageObject, a as getTextSource } from './storage-helpers-1afafead.js';\n\nconst amplifyS3TextCss = \":host{--container-color:var(--amplify-smoke-white);--border-color:var(--amplify-light-grey);--font-size:var(--amplify-text-md);--text-color:var(--amplify-secondary-color)}.text-container{background-color:var(--container-color);border:1px solid var(--border-color);border-radius:5px;margin-bottom:10px}pre{display:block;margin:0.5rem 0;padding:0.5rem;line-height:1rem;max-height:50rem;font-size:var(--font-size);color:var(--text-color);word-break:break-all;overflow-y:scroll;overflow-x:auto}\";\n\nconst logger = new Logger('S3Text');\nconst AmplifyS3Text = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** The content type header used when uploading to S3 */\n        this.contentType = 'text/*';\n        /** The access level of the text file */\n        this.level = AccessLevel.Public;\n        /** Fallback content */\n        this.fallbackText = Translations.TEXT_FALLBACK_CONTENT;\n    }\n    async watchHandler() {\n        await this.load();\n    }\n    async componentWillLoad() {\n        await this.load();\n    }\n    async load() {\n        const { path, textKey, body, contentType, level, track, identityId } = this;\n        if (!textKey && !path) {\n            logger.debug('empty textKey and path');\n            return;\n        }\n        const key = textKey || path;\n        logger.debug('loading ' + key + '...');\n        if (body) {\n            await putStorageObject(textKey, body, level, track, contentType, logger);\n        }\n        try {\n            this.src = await getTextSource(key, level, track, identityId, logger);\n        }\n        catch (err) {\n            logger.debug(err);\n            throw new Error(err);\n        }\n    }\n    render() {\n        return (h(\"div\", null, h(\"div\", { class: \"text-container\" }, this.src ? (h(\"pre\", null, this.src)) : (h(\"pre\", null, I18n.get(this.fallbackText))))));\n    }\n    static get watchers() { return {\n        \"textKey\": [\"watchHandler\"],\n        \"body\": [\"watchHandler\"]\n    }; }\n};\nAmplifyS3Text.style = amplifyS3TextCss;\n\nexport { AmplifyS3Text as amplify_s3_text };\n"],"names":["r","registerInstance","h","Logger","I18n","A","AccessLevel","T","Translations","p","putStorageObject","a","getTextSource","amplifyS3TextCss","logger","AmplifyS3Text","hostRef","contentType","level","Public","fallbackText","TEXT_FALLBACK_CONTENT","load","path","textKey","body","track","identityId","debug","key","src","Error","class","get","style","amplify_s3_text"],"sourceRoot":"webpack:///"}