{"version":3,"file":"node_modules_aws-amplify_ui-components_dist_esm_amplify-select-mfa-type_entry_js.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMgB,MAAM,GAAG,IAAIb,4DAAJ,CAAW,eAAX,CAAf;;AACA,IAAMc,oBAAoB;AACtB,gCAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACjBjB,IAAAA,qDAAgB,CAAC,IAAD,EAAOiB,OAAP,CAAhB;AACA;;AACA,SAAKC,YAAL,GAAoB,UAAAC,KAAK;AAAA,aAAI,KAAI,CAACC,MAAL,CAAYD,KAAZ,CAAJ;AAAA,KAAzB;;AACA,SAAKE,SAAL,GAAiB,KAAjB;AACA,SAAKC,aAAL,GAAqB,IAArB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,MAAL,GAAc,KAAd;AACA,SAAKC,OAAL,GAAe,KAAf;AACA,SAAKC,KAAL,GAAa,KAAb;AACA,SAAKC,OAAL,GAAe,KAAf;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACH;;AAbqB;AAAA;AAAA,WActB,iCAAwBT,KAAxB,EAA+B;AAC3B,WAAKE,SAAL,GAAiB,KAAjB;AACA,WAAKC,aAAL,GAAqB,IAArB,CAF2B,CAG3B;;AACA,WAAKG,OAAL,GAAe,KAAf;AACA,WAAKD,MAAL,GAAc,KAAd;AACA,WAAKE,KAAL,GAAa,KAAb;AACA,WAAKE,cAAL,GAAsB,KAAtB;AACA,0BAAiCT,KAAK,CAACU,MAAvC;AAAA,UAAQC,KAAR,iBAAQA,KAAR;AAAA,UAAeC,IAAf,iBAAeA,IAAf;AAAA,UAAqBC,OAArB,iBAAqBA,OAArB;AACA,UAAMC,SAAS,GAAG,CAAC,OAAD,EAAU,UAAV,EAAsBC,QAAtB,CAA+BH,IAA/B,CAAlB;;AACA,UAAID,KAAK,KAAKzB,0DAAV,IAA2B4B,SAA/B,EAA0C;AACtC,aAAKP,KAAL,GAAaM,OAAb;AACH;;AACD,UAAIF,KAAK,KAAKzB,2DAAV,IAA4B4B,SAAhC,EAA2C;AACvC,aAAKT,MAAL,GAAcQ,OAAd;AACH;;AACD,UAAIF,KAAK,KAAKzB,4DAAV,IAA6B4B,SAAjC,EAA4C;AACxC,aAAKR,OAAL,GAAeO,OAAf;AACH;AACJ;AAjCqB;AAAA;AAAA;AAAA,0VAkCtB,iBAAab,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AACI;AACA,oBAAIA,KAAJ,EAAW;AACPA,kBAAAA,KAAK,CAACmB,cAAN;AACH;;AACDvB,gBAAAA,MAAM,CAACwB,KAAP,CAAa,iBAAb,EAAgC;AAC5BH,kBAAAA,IAAI,EAAE,KAAKZ,MADiB;AAE5BW,kBAAAA,GAAG,EAAE,KAAKT,KAFkB;AAG5B,4BAAU,KAAKD;AAHa,iBAAhC;;AAKA,oBAAI,KAAKD,MAAT,EAAiB;AACb,uBAAKD,SAAL,GAAiBlB,2DAAjB;AACH,iBAFD,MAGK,IAAI,KAAKqB,KAAT,EAAgB;AACjB,uBAAKH,SAAL,GAAiBlB,0DAAjB;AACH,iBAFI,MAGA,IAAI,KAAKoB,OAAT,EAAkB;AACnB,uBAAKF,SAAL,GAAiBlB,4DAAjB;AACH;;AACKmC,gBAAAA,IAnBV,GAmBiB,KAAKC,QAnBtB;;AAAA,sBAoBQ,CAACnC,mDAAD,IAAS,OAAOA,mEAAP,KAAgC,UApBjD;AAAA;AAAA;AAAA;;AAAA,sBAqBc,IAAIqC,KAAJ,CAAUjC,qDAAV,CArBd;;AAAA;AAuBI,qBAAKiB,OAAL,GAAe,IAAf;AAvBJ;AAAA;AAAA,uBAyBuCrB,mEAAA,CAAqBkC,IAArB,EAA2B,KAAKjB,SAAhC,CAzBvC;;AAAA;AAyBcqB,gBAAAA,gBAzBd;AA0BQ7B,gBAAAA,MAAM,CAACwB,KAAP,CAAa,6BAAb,EAA4CK,gBAA5C;AACA,qBAAKtB,aAAL,aAAwBnB,wDAAA,CAASK,yEAAT,CAAxB,cAAmE,KAAKe,SAAxE;AA3BR;AAAA;;AAAA;AAAA;AAAA;AA8BgBwB,gBAAAA,OA9BhB,eA8BgBA,OA9BhB;;AA+BQ,oBAAIA,OAAO,KAAKnC,qDAAZ,IACAmC,OAAO,KAAKjC,qDADhB,EACsD;AAClD,uBAAKO,SAAL,GAAiB,IAAjB;AACA,uBAAKC,aAAL,GAAqBnB,wDAAA,CAASK,4EAAT,CAArB;AACH,iBAJD,MAKK;AACDO,kBAAAA,MAAM,CAACwB,KAAP,CAAa,0BAAb;AACA,uBAAKjB,aAAL,GAAqBnB,wDAAA,CAASK,yFAAT,CAArB;AACH;;AAvCT;AAAA;AA0CQ,qBAAKmB,OAAL,GAAe,KAAf;AACA,qBAAKC,cAAL,GAAsB,IAAtB;AA3CR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAlCsB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,WAgFtB,0BAAiB;AAAA;;AACb,UAAI,CAAC,KAAKsB,QAAN,IAAkBC,MAAM,CAACC,IAAP,CAAY,KAAKF,QAAjB,EAA2BG,MAA3B,GAAoC,CAA1D,EAA6D;AACzDtC,QAAAA,MAAM,CAACwB,KAAP,CAAapC,wDAAA,CAASK,yFAAT,CAAb;AACA,eAAQP,qDAAC,CAAC,KAAD,EAAQ,IAAR,EAAcA,qDAAC,CAAC,GAAD,EAAM,IAAN,EAAYE,wDAAA,CAASK,yFAAT,CAAZ,CAAf,CAAT;AACH;;AACD,2BAAgC,KAAK0C,QAArC;AAAA,UAAQf,GAAR,kBAAQA,GAAR;AAAA,UAAaC,IAAb,kBAAaA,IAAb;AAAA,UAAmBmB,QAAnB,kBAAmBA,QAAnB;AACA,aAAQtD,qDAAC,CAAC,sBAAD,EAAyB;AAAEuD,QAAAA,gBAAgB,EAAErD,wDAAA,CAASK,2FAAT,CAApB;AAA+EkD,QAAAA,UAAU,EAAEvD,wDAAA,CAASK,oFAAT,CAA3F;AAA+IU,QAAAA,YAAY,EAAE,sBAAAC,KAAK;AAAA,iBAAI,MAAI,CAACD,YAAL,CAAkBC,KAAlB,CAAJ;AAAA,SAAlK;AAAgMQ,QAAAA,OAAO,EAAE,KAAKA;AAA9M,OAAzB,EAAkPQ,GAAG,GAAIlC,qDAAC,CAAC,sBAAD,EAAyB;AAAE2D,QAAAA,GAAG,EAAE,KAAP;AAAcC,QAAAA,IAAI,EAAE,SAApB;AAA+B/B,QAAAA,KAAK,EAAE,KAAtC;AAA6CgC,QAAAA,KAAK,EAAE,KAApD;AAA2DC,QAAAA,iBAAiB,EAAE,2BAAA5C,KAAK;AAAA,iBAAI,MAAI,CAAC6C,uBAAL,CAA6B7C,KAA7B,CAAJ;AAAA;AAAnF,OAAzB,CAAL,GAA+J,IAApZ,EAA0ZiB,IAAI,GAAInC,qDAAC,CAAC,sBAAD,EAAyB;AAAE2D,QAAAA,GAAG,EAAE,MAAP;AAAeC,QAAAA,IAAI,EAAE,SAArB;AAAgC/B,QAAAA,KAAK,EAAE,MAAvC;AAA+CgC,QAAAA,KAAK,EAAE,MAAtD;AAA8DC,QAAAA,iBAAiB,EAAE,2BAAA5C,KAAK;AAAA,iBAAI,MAAI,CAAC6C,uBAAL,CAA6B7C,KAA7B,CAAJ;AAAA;AAAtF,OAAzB,CAAL,GAAkK,IAAhkB,EAAskBoC,QAAQ,GAAItD,qDAAC,CAAC,sBAAD,EAAyB;AAAE2D,QAAAA,GAAG,EAAE,OAAP;AAAgBC,QAAAA,IAAI,EAAE,SAAtB;AAAiC/B,QAAAA,KAAK,EAAE,OAAxC;AAAiDgC,QAAAA,KAAK,EAAE,QAAxD;AAAkEC,QAAAA,iBAAiB,EAAE,2BAAA5C,KAAK;AAAA,iBAAI,MAAI,CAAC6C,uBAAL,CAA6B7C,KAA7B,CAAJ;AAAA;AAA1F,OAAzB,CAAL,GAAsK,IAApvB,CAAT;AACH;AAvFqB;AAAA;AAAA,WAwFtB,uBAAc;AAAA;;AACV,UAAI,KAAKS,cAAL,IAAuB,KAAKN,aAAhC,EAA+C;AAC3C,eAAQrB,qDAAC,CAAC,eAAD,EAAkB;AAAE8C,UAAAA,OAAO,EAAE,KAAKzB,aAAhB;AAA+B2C,UAAAA,WAAW,EAAE,uBAAM;AACrE,kBAAI,CAAC3C,aAAL,GAAqB,IAArB;AACA,kBAAI,CAACM,cAAL,GAAsB,KAAtB;AACH;AAHsB,SAAlB,CAAT;AAIH;;AACD,aAAO,IAAP;AACH;AAhGqB;AAAA;AAAA,WAiGtB,kBAAS;AACL,aAAQ3B,qDAAC,CAAC,KAAD,EAAQ,IAAR,EAAc,KAAKiE,cAAL,EAAd,EAAqC,KAAK7C,SAAL,GAAiBpB,qDAAC,CAAC,oBAAD,EAAuB;AAAEuC,QAAAA,IAAI,EAAE,KAAKC;AAAb,OAAvB,CAAlB,GAAoE,IAAzG,EAA+G,KAAK0B,WAAL,EAA/G,CAAT;AACH;AAnGqB;;AAAA;AAAA,GAA1B","sources":["./node_modules/@aws-amplify/ui-components/dist/esm/amplify-select-mfa-type.entry.js"],"sourcesContent":["import { r as registerInstance, h } from './index-83f2275b.js';\nimport { Logger, I18n } from '@aws-amplify/core';\nimport { M as MfaOption } from './auth-types-78df304e.js';\nimport { Auth } from '@aws-amplify/auth';\nimport { T as Translations } from './Translations-c833f663.js';\nimport { N as NO_AUTH_MODULE_FOUND, e as USER_NOT_SETUP_SOFTWARE_TOKEN_MFA, f as USER_NOT_VERIFIED_SOFTWARE_TOKEN_MFA } from './constants-c8ecaa24.js';\n\nconst logger = new Logger('SelectMFAType');\nconst AmplifySelectMFAType = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Fires when Verify is clicked */\n        this.handleSubmit = event => this.verify(event);\n        this.TOTPSetup = false;\n        this.selectMessage = null;\n        this.MFAMethod = null;\n        this.isTOTP = false;\n        this.isNoMFA = false;\n        this.isSMS = false;\n        this.loading = false;\n        this.isToastVisible = false;\n    }\n    handleRadioButtonChange(event) {\n        this.TOTPSetup = false;\n        this.selectMessage = null;\n        // Reseting state values to default\n        this.isNoMFA = false;\n        this.isTOTP = false;\n        this.isSMS = false;\n        this.isToastVisible = false;\n        const { value, type, checked } = event.target;\n        const checkType = ['radio', 'checkbox'].includes(type);\n        if (value === MfaOption.SMS && checkType) {\n            this.isSMS = checked;\n        }\n        if (value === MfaOption.TOTP && checkType) {\n            this.isTOTP = checked;\n        }\n        if (value === MfaOption.NOMFA && checkType) {\n            this.isNoMFA = checked;\n        }\n    }\n    async verify(event) {\n        // avoid submitting the form\n        if (event) {\n            event.preventDefault();\n        }\n        logger.debug('MFA Type Values', {\n            TOTP: this.isTOTP,\n            SMS: this.isSMS,\n            'No MFA': this.isNoMFA,\n        });\n        if (this.isTOTP) {\n            this.MFAMethod = MfaOption.TOTP;\n        }\n        else if (this.isSMS) {\n            this.MFAMethod = MfaOption.SMS;\n        }\n        else if (this.isNoMFA) {\n            this.MFAMethod = MfaOption.NOMFA;\n        }\n        const user = this.authData;\n        if (!Auth || typeof Auth.setPreferredMFA !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            const preferredMFAData = await Auth.setPreferredMFA(user, this.MFAMethod);\n            logger.debug('Set Preferred MFA Succeeded', preferredMFAData);\n            this.selectMessage = `${I18n.get(Translations.SUCCESS_MFA_TYPE)} ${this.MFAMethod}`;\n        }\n        catch (error) {\n            const { message } = error;\n            if (message === USER_NOT_SETUP_SOFTWARE_TOKEN_MFA ||\n                message === USER_NOT_VERIFIED_SOFTWARE_TOKEN_MFA) {\n                this.TOTPSetup = true;\n                this.selectMessage = I18n.get(Translations.SETUP_TOTP_REQUIRED);\n            }\n            else {\n                logger.debug('Set Preferred MFA failed', error);\n                this.selectMessage = I18n.get(Translations.UNABLE_TO_SETUP_MFA_AT_THIS_TIME);\n            }\n        }\n        finally {\n            this.loading = false;\n            this.isToastVisible = true;\n        }\n    }\n    contentBuilder() {\n        if (!this.MFATypes || Object.keys(this.MFATypes).length < 2) {\n            logger.debug(I18n.get(Translations.LESS_THAN_TWO_MFA_VALUES_MESSAGE));\n            return (h(\"div\", null, h(\"a\", null, I18n.get(Translations.LESS_THAN_TWO_MFA_VALUES_MESSAGE))));\n        }\n        const { SMS, TOTP, Optional } = this.MFATypes;\n        return (h(\"amplify-form-section\", { submitButtonText: I18n.get(Translations.SELECT_MFA_TYPE_SUBMIT_BUTTON_TEXT), headerText: I18n.get(Translations.SELECT_MFA_TYPE_HEADER_TEXT), handleSubmit: event => this.handleSubmit(event), loading: this.loading }, SMS ? (h(\"amplify-radio-button\", { key: \"sms\", name: \"MFAType\", value: \"SMS\", label: \"SMS\", handleInputChange: event => this.handleRadioButtonChange(event) })) : null, TOTP ? (h(\"amplify-radio-button\", { key: \"totp\", name: \"MFAType\", value: \"TOTP\", label: \"TOTP\", handleInputChange: event => this.handleRadioButtonChange(event) })) : null, Optional ? (h(\"amplify-radio-button\", { key: \"noMFA\", name: \"MFAType\", value: \"NOMFA\", label: \"No MFA\", handleInputChange: event => this.handleRadioButtonChange(event) })) : null));\n    }\n    renderToast() {\n        if (this.isToastVisible && this.selectMessage) {\n            return (h(\"amplify-toast\", { message: this.selectMessage, handleClose: () => {\n                    this.selectMessage = null;\n                    this.isToastVisible = false;\n                } }));\n        }\n        return null;\n    }\n    render() {\n        return (h(\"div\", null, this.contentBuilder(), this.TOTPSetup ? h(\"amplify-totp-setup\", { user: this.authData }) : null, this.renderToast()));\n    }\n};\n\nexport { AmplifySelectMFAType as amplify_select_mfa_type };\n"],"names":["r","registerInstance","h","Logger","I18n","M","MfaOption","Auth","T","Translations","N","NO_AUTH_MODULE_FOUND","e","USER_NOT_SETUP_SOFTWARE_TOKEN_MFA","f","USER_NOT_VERIFIED_SOFTWARE_TOKEN_MFA","logger","AmplifySelectMFAType","hostRef","handleSubmit","event","verify","TOTPSetup","selectMessage","MFAMethod","isTOTP","isNoMFA","isSMS","loading","isToastVisible","target","value","type","checked","checkType","includes","SMS","TOTP","NOMFA","preventDefault","debug","user","authData","setPreferredMFA","Error","preferredMFAData","get","SUCCESS_MFA_TYPE","message","SETUP_TOTP_REQUIRED","UNABLE_TO_SETUP_MFA_AT_THIS_TIME","MFATypes","Object","keys","length","LESS_THAN_TWO_MFA_VALUES_MESSAGE","Optional","submitButtonText","SELECT_MFA_TYPE_SUBMIT_BUTTON_TEXT","headerText","SELECT_MFA_TYPE_HEADER_TEXT","key","name","label","handleInputChange","handleRadioButtonChange","handleClose","contentBuilder","renderToast","amplify_select_mfa_type"],"sourceRoot":"webpack:///"}