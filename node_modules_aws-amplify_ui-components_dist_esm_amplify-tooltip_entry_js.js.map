{"version":3,"file":"node_modules_aws-amplify_ui-components_dist_esm_amplify-tooltip_entry_js.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AAEA,IAAMG,iBAAiB,GAAG,u/CAA1B;;AAEA,IAAMC,cAAc;AAChB,0BAAYC,OAAZ,EAAqB;AAAA;;AACjBJ,IAAAA,qDAAgB,CAAC,IAAD,EAAOI,OAAP,CAAhB;AACA;;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACH;;AALe;AAAA;AAAA,WAMhB,kBAAS;AACL,aAAQJ,qDAAC,CAAC,KAAD,EAAQ;AAAEK,QAAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiB,+BAAqB,KAAKF;AAA3C,SAAT;AAAsE,qBAAa,KAAKG;AAAxF,OAAR,EAAwGP,qDAAC,CAAC,MAAD,EAAS,IAAT,CAAzG,CAAT;AACH;AARe;;AAAA;AAAA,GAApB;;AAUAE,cAAc,CAACM,KAAf,GAAuBP,iBAAvB","sources":["./node_modules/@aws-amplify/ui-components/dist/esm/amplify-tooltip.entry.js"],"sourcesContent":["import { r as registerInstance, h } from './index-83f2275b.js';\n\nconst amplifyTooltipCss = \":host{--font-family:var(--amplify-font-family);--background-color:var(--amplify-secondary-color);--color:var(--amplify-secondary-contrast);--border-color:var(--amplify-secondary-color)}.tooltip{display:inline;position:relative;font-size:var(--amplify-text-xxs);font-family:var(--font-family);margin:0 0 0 16px}.tooltip :after{background-color:var(--background-color);border-radius:2px;bottom:46px;color:var(--color);content:attr(data-text);text-decoration:none;padding:10px;left:50%;-webkit-transform:translateX(-50%);-moz-transform:translateX(-50%);-ms-transform:translateX(-50%);-o-transform:translateX(-50%);transform:translateX(-50%);position:absolute;white-space:nowrap;opacity:0;-webkit-transition:all 0.3s ease-in-out;transition:all 0.3s ease-in-out}.tooltip :before{border:solid;border-color:var(--border-color) transparent transparent transparent;border-width:5px;bottom:36px;content:\\\"\\\";left:50%;-webkit-transform:translateX(-50%);-moz-transform:translateX(-50%);-ms-transform:translateX(-50%);-o-transform:translateX(-50%);transform:translateX(-50%);position:absolute;font-size:var(--amplify-text-sm);opacity:0;-webkit-transition:all 0.3s ease-in-out;transition:all 0.3s ease-in-out}.tooltip :hover:after{opacity:1;-webkit-transition-delay:1s;transition-delay:1s}.tooltip :hover:before{opacity:1;-webkit-transition-delay:1s;transition-delay:1s}.auto-show-tooltip :after{opacity:1;-webkit-transition-delay:1s;transition-delay:1s}.auto-show-tooltip :before{opacity:1;-webkit-transition-delay:1s;transition-delay:1s}\";\n\nconst AmplifyTooltip = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** (Optional) Whether or not the tooltip should be automatically shown, i.e. not disappear when not hovered */\n        this.shouldAutoShow = false;\n    }\n    render() {\n        return (h(\"div\", { class: { tooltip: true, 'auto-show-tooltip': this.shouldAutoShow }, \"data-text\": this.text }, h(\"slot\", null)));\n    }\n};\nAmplifyTooltip.style = amplifyTooltipCss;\n\nexport { AmplifyTooltip as amplify_tooltip };\n"],"names":["r","registerInstance","h","amplifyTooltipCss","AmplifyTooltip","hostRef","shouldAutoShow","class","tooltip","text","style","amplify_tooltip"],"sourceRoot":"webpack:///"}